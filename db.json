{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"26cfc09cb18a0ea46cbac377909f43889c740057","modified":1496481135000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1496369716000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1496369716000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1496369716000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1496369716000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1496369716000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1496369716000},{"_id":"source/_posts/Java_native.md","hash":"b5e4b8aa726710853a0eb06ebd8f53cc7f95a61b","modified":1496480992000},{"_id":"source/_posts/Mybatis 动态传入表名进行sql查询.md","hash":"d282ead3b021d963ed1e6b7a571b2fc2767839e4","modified":1496480944000},{"_id":"source/_posts/hangzhouweizhang.md","hash":"2fa0b8ce4a0da7a9603cc1ae15cc1809d8b72958","modified":1496480974000},{"_id":"source/_posts/如何用C写python库.md","hash":"f4c909a42302f23992f7e7e31b26a14d3142c613","modified":1496481279000},{"_id":"source/_posts/pelican_blog.md","hash":"71c5ac20725d2f2b95bb7534c7668ee88dfe62c3","modified":1496481029000},{"_id":"source/_posts/protobuf_stu.md","hash":"a6ea1d857251e7a34ae2e86a4640c1848f85eece","modified":1496481067000},{"_id":"source/about/index.md","hash":"35efb1bc8d148f964d45786ddaa1ae9428c16a47","modified":1496479938000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1496369716000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1496369716000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1496369716000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1496369716000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496369716000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496369716000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1496369716000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1496369716000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1496369716000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1496369716000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1496369716000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1496369716000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1496369716000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1496369716000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1496369716000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1496369716000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1496369716000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1496369716000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1496369716000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1496369716000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1496369716000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1496369716000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1496369716000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1496369716000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1496369716000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1496369716000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1496369716000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1496369716000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1496369716000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1496369716000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496369716000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1496369716000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1496369716000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1496369716000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1496369716000},{"_id":"public/about/index.html","hash":"8411053bdcd166308aafc875b78aa478d00cfafa","modified":1496481287307},{"_id":"public/2017/06/03/如何用C写python库/index.html","hash":"950b2a974b7a40350a3d98a447eebb22d6d13456","modified":1496481287308},{"_id":"public/2017/06/03/pelican_blog/index.html","hash":"c37dfeb7f5bbb05124391d9ba318dbe0130fb142","modified":1496481287308},{"_id":"public/2017/05/13/Mybatis 动态传入表名进行sql查询/index.html","hash":"8ed2e3b049279568b5abcbc1f3443e79c1792c5d","modified":1496481287308},{"_id":"public/2016/03/15/hangzhouweizhang/index.html","hash":"e4d940f9778c96d325576bca8959657982cedcf9","modified":1496481287309},{"_id":"public/archives/index.html","hash":"fa1e5062c01496056ea20e51a7b41497ee226148","modified":1496481287309},{"_id":"public/archives/2016/index.html","hash":"9cd311abc400e1d70e13abd5386e157d57a23261","modified":1496481287309},{"_id":"public/archives/2016/02/index.html","hash":"789f908f8e2edbd806b21c4b275438657c55c64f","modified":1496481287309},{"_id":"public/archives/2016/03/index.html","hash":"ff6433303c9e9aebb805b7c4e732793690208ccb","modified":1496481287311},{"_id":"public/archives/2016/07/index.html","hash":"494685ad78d06a1e28b6e4746a0a29754810bcd1","modified":1496481287311},{"_id":"public/archives/2017/index.html","hash":"99c82b899b25b12bbc5657d24a7b3d0ebeeca92b","modified":1496481287312},{"_id":"public/archives/2017/05/index.html","hash":"6f15f61b6e4977a3bb6792cba4416f705a687a4e","modified":1496481287312},{"_id":"public/archives/2017/06/index.html","hash":"bd905050b103cd58c3c7873277470e8840517faa","modified":1496481287312},{"_id":"public/2016/07/03/Java_native/index.html","hash":"825e3bdf25a19ffe3fd4ce1b40938eca7472f567","modified":1496481287312},{"_id":"public/2016/02/29/protobuf_stu/index.html","hash":"59a947150a1bf3ba442e2e72b1f80a8cc8dd6c24","modified":1496481287312},{"_id":"public/index.html","hash":"2f696638f4631e8c741e865dbbef8c1fecbbe3ff","modified":1496481287312},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496481287317},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496481287317},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496481287317},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496481287317},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496481287317},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496481287317},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1496481287317},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1496481287318},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1496481287318},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496481287318},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1496481287985},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1496481287992},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1496481287992},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496481287993},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1496481287993},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1496481287993},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496481287993},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1496481287993},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1496481287993},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1496481287993},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1496481287993},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1496481287995},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1496481287995}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-06-03T08:52:18.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-06-03 16:52:18\n---\n","updated":"2017-06-03T08:52:18.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3h2bih40001i43r0dp6bbat","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java native关键字","date":"2016-07-03T08:52:18.000Z","_content":"## 前言\n在Java的Object类中的函数定义如hasCode()函数如下:\n```Java\npublic native int hasCode();\n```\n看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下\n\n## 什么是native\nnative就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)\n> \"A native method is a Java method whose implementation is provided by non-java code.\"\n\n定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:\n```Java\npublic class IHaveNatives {\n    native public void Native1(int x);\n    native static public long Native2();\n    native synchronized private float Native3(Object o);\n    native void Native4(int[] ary) throws Exception;\n} \n```\n很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。\n\n## 为什么要有native\n1. 与java环境外交互：\n有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。\n1. 与操作系统交互：\nJVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。\n1. Sun's Java：\nSun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。\n\n## 怎么样使用native\n1. 首先创建一个native的类\n```Java\npublic class HelloNative\n{\n    static\n    {\n        System.loadLibrary(\"HelloNative\");\n    }\n     \n    public static native void sayHello();\n     \n    @SuppressWarnings(\"static-access\")\n    public static void main(String[] args)\n    {\n        new HelloNative().sayHello();\n    }\n}\n```\n2. 运行生成javah，等到头文件\n```Bash\njavac HelloNative.java\njavah HelloNative\n```\n就可以等到如下的HelloNative.h文件\n```C\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class HelloNative */\n \n#ifndef _Included_HelloNative\n#define _Included_HelloNative\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     HelloNative\n * Method:    sayHello\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_HelloNative_sayHello\n  (JNIEnv *, jclass);\n \n#ifdef __cplusplus\n}\n#endif\n#endif\n```\n3. 根据头文件实现一个本地方法\n```C\n#include \"HelloNative.h\"\n#include <stdio.h>\n \nJNIEXPORT void JNICALL Java_HelloNative_sayHello\n{\n    printf(\"Hello，JNI\");   \n}\n```\n4. 用GCC生成库文件\n5. 运行即可\n```Bash\njava HelloNative\n\nHello，JNI\n```\n\n","source":"_posts/Java_native.md","raw":"---\ntitle: Java native关键字\ndate: 2016-07-03 16:52:18\n---\n## 前言\n在Java的Object类中的函数定义如hasCode()函数如下:\n```Java\npublic native int hasCode();\n```\n看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下\n\n## 什么是native\nnative就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)\n> \"A native method is a Java method whose implementation is provided by non-java code.\"\n\n定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:\n```Java\npublic class IHaveNatives {\n    native public void Native1(int x);\n    native static public long Native2();\n    native synchronized private float Native3(Object o);\n    native void Native4(int[] ary) throws Exception;\n} \n```\n很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。\n\n## 为什么要有native\n1. 与java环境外交互：\n有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。\n1. 与操作系统交互：\nJVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。\n1. Sun's Java：\nSun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。\n\n## 怎么样使用native\n1. 首先创建一个native的类\n```Java\npublic class HelloNative\n{\n    static\n    {\n        System.loadLibrary(\"HelloNative\");\n    }\n     \n    public static native void sayHello();\n     \n    @SuppressWarnings(\"static-access\")\n    public static void main(String[] args)\n    {\n        new HelloNative().sayHello();\n    }\n}\n```\n2. 运行生成javah，等到头文件\n```Bash\njavac HelloNative.java\njavah HelloNative\n```\n就可以等到如下的HelloNative.h文件\n```C\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class HelloNative */\n \n#ifndef _Included_HelloNative\n#define _Included_HelloNative\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     HelloNative\n * Method:    sayHello\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_HelloNative_sayHello\n  (JNIEnv *, jclass);\n \n#ifdef __cplusplus\n}\n#endif\n#endif\n```\n3. 根据头文件实现一个本地方法\n```C\n#include \"HelloNative.h\"\n#include <stdio.h>\n \nJNIEXPORT void JNICALL Java_HelloNative_sayHello\n{\n    printf(\"Hello，JNI\");   \n}\n```\n4. 用GCC生成库文件\n5. 运行即可\n```Bash\njava HelloNative\n\nHello，JNI\n```\n\n","slug":"Java_native","published":1,"updated":"2017-06-03T09:09:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3h2bih00000i43rk0meu9h6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在Java的Object类中的函数定义如hasCode()函数如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hasCode</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure></p>\n<p>看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下</p>\n<h2 id=\"什么是native\"><a href=\"#什么是native\" class=\"headerlink\" title=\"什么是native\"></a>什么是native</h2><p>native就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)</p>\n<blockquote>\n<p>“A native method is a Java method whose implementation is provided by non-java code.”</p>\n</blockquote>\n<p>定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IHaveNatives</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Native1</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">Native2</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> <span class=\"title\">Native3</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">Native4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] ary)</span> <span class=\"keyword\">throws</span> Exception</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。</p>\n<h2 id=\"为什么要有native\"><a href=\"#为什么要有native\" class=\"headerlink\" title=\"为什么要有native\"></a>为什么要有native</h2><ol>\n<li>与java环境外交互：<br>有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。</li>\n<li>与操作系统交互：<br>JVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</li>\n<li>Sun’s Java：<br>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</li>\n</ol>\n<h2 id=\"怎么样使用native\"><a href=\"#怎么样使用native\" class=\"headerlink\" title=\"怎么样使用native\"></a>怎么样使用native</h2><ol>\n<li><p>首先创建一个native的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloNative</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"HelloNative\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> HelloNative().sayHello();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行生成javah，等到头文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac HelloNative.java</div><div class=\"line\">javah HelloNative</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>就可以等到如下的HelloNative.h文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">/* Header for class HelloNative */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _Included_HelloNative</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _Included_HelloNative</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Class:     HelloNative</div><div class=\"line\"> * Method:    sayHello</div><div class=\"line\"> * Signature: ()V</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL <span class=\"title\">Java_HelloNative_sayHello</span></span></div><div class=\"line\">  <span class=\"params\">(JNIEnv *, jclass)</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>根据头文件实现一个本地方法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"HelloNative.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL Java_HelloNative_sayHello</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello，JNI\"</span>);   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>用GCC生成库文件</p>\n</li>\n<li>运行即可<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java HelloNative</div><div class=\"line\"></div><div class=\"line\">Hello，JNI</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在Java的Object类中的函数定义如hasCode()函数如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hasCode</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure></p>\n<p>看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下</p>\n<h2 id=\"什么是native\"><a href=\"#什么是native\" class=\"headerlink\" title=\"什么是native\"></a>什么是native</h2><p>native就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)</p>\n<blockquote>\n<p>“A native method is a Java method whose implementation is provided by non-java code.”</p>\n</blockquote>\n<p>定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IHaveNatives</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Native1</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">Native2</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> <span class=\"title\">Native3</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">Native4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] ary)</span> <span class=\"keyword\">throws</span> Exception</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。</p>\n<h2 id=\"为什么要有native\"><a href=\"#为什么要有native\" class=\"headerlink\" title=\"为什么要有native\"></a>为什么要有native</h2><ol>\n<li>与java环境外交互：<br>有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。</li>\n<li>与操作系统交互：<br>JVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</li>\n<li>Sun’s Java：<br>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</li>\n</ol>\n<h2 id=\"怎么样使用native\"><a href=\"#怎么样使用native\" class=\"headerlink\" title=\"怎么样使用native\"></a>怎么样使用native</h2><ol>\n<li><p>首先创建一个native的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloNative</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"HelloNative\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> HelloNative().sayHello();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行生成javah，等到头文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac HelloNative.java</div><div class=\"line\">javah HelloNative</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>就可以等到如下的HelloNative.h文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">/* Header for class HelloNative */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _Included_HelloNative</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _Included_HelloNative</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Class:     HelloNative</div><div class=\"line\"> * Method:    sayHello</div><div class=\"line\"> * Signature: ()V</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL <span class=\"title\">Java_HelloNative_sayHello</span></span></div><div class=\"line\">  <span class=\"params\">(JNIEnv *, jclass)</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>根据头文件实现一个本地方法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"HelloNative.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL Java_HelloNative_sayHello</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello，JNI\"</span>);   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>用GCC生成库文件</p>\n</li>\n<li>运行即可<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java HelloNative</div><div class=\"line\"></div><div class=\"line\">Hello，JNI</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Mybatis 动态传入表名进行sql查询","date":"2017-05-13T08:52:18.000Z","_content":"\n网上也有相关的方法，基本都为\n1. 添加属性statementType=\"STATEMENT\"\n2. 用${}代替#{}。如此一来就会有sql注入的危险。\n\n今天自己尝试了一种新的方法，如下:\n#### 基本思路\n利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。\n#### 实现过程\n* 定义一个mapper\n\n```Java\npublic interface TestMapper{\n    //统计userId的对应的数据总数\n    int countByUserId(@Param(\"tableName\") String tableName, @Param(\"userId\") Integer userId);\n}\n```\n* 定义xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"TestMapper对应路径\">\n    <select id=\"countByUserId\" parameterType=\"hashmap\" resultType=\"java.lang.Integer\">\n        SELECT\n        COUNT(1)\n        FROM\n        ${tableName}\n        WHERE\n        userId = #{userId}\n    </select>\n</mapper>\n\n```\n如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。\n\n\n\n","source":"_posts/Mybatis 动态传入表名进行sql查询.md","raw":"---\ntitle: Mybatis 动态传入表名进行sql查询\ndate: 2017-05-13 16:52:18\n---\n\n网上也有相关的方法，基本都为\n1. 添加属性statementType=\"STATEMENT\"\n2. 用${}代替#{}。如此一来就会有sql注入的危险。\n\n今天自己尝试了一种新的方法，如下:\n#### 基本思路\n利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。\n#### 实现过程\n* 定义一个mapper\n\n```Java\npublic interface TestMapper{\n    //统计userId的对应的数据总数\n    int countByUserId(@Param(\"tableName\") String tableName, @Param(\"userId\") Integer userId);\n}\n```\n* 定义xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"TestMapper对应路径\">\n    <select id=\"countByUserId\" parameterType=\"hashmap\" resultType=\"java.lang.Integer\">\n        SELECT\n        COUNT(1)\n        FROM\n        ${tableName}\n        WHERE\n        userId = #{userId}\n    </select>\n</mapper>\n\n```\n如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。\n\n\n\n","slug":"Mybatis 动态传入表名进行sql查询","published":1,"updated":"2017-06-03T09:09:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3h2bih60002i43rc8fl8b3i","content":"<p>网上也有相关的方法，基本都为</p>\n<ol>\n<li>添加属性statementType=”STATEMENT”</li>\n<li>用${}代替#{}。如此一来就会有sql注入的危险。</li>\n</ol>\n<p>今天自己尝试了一种新的方法，如下:</p>\n<h4 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h4><p>利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。</p>\n<h4 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h4><ul>\n<li>定义一个mapper</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestMapper</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//统计userId的对应的数据总数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countByUserId</span><span class=\"params\">(@Param(<span class=\"string\">\"tableName\"</span>)</span> String tableName, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"userId\"</span>)</span> Integer userId)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"TestMapper对应路径\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"countByUserId\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"hashmap\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span></div><div class=\"line\">        SELECT</div><div class=\"line\">        COUNT(1)</div><div class=\"line\">        FROM</div><div class=\"line\">        $&#123;tableName&#125;</div><div class=\"line\">        WHERE</div><div class=\"line\">        userId = #&#123;userId&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网上也有相关的方法，基本都为</p>\n<ol>\n<li>添加属性statementType=”STATEMENT”</li>\n<li>用${}代替#{}。如此一来就会有sql注入的危险。</li>\n</ol>\n<p>今天自己尝试了一种新的方法，如下:</p>\n<h4 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h4><p>利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。</p>\n<h4 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h4><ul>\n<li>定义一个mapper</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestMapper</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//统计userId的对应的数据总数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countByUserId</span><span class=\"params\">(@Param(<span class=\"string\">\"tableName\"</span>)</span> String tableName, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"userId\"</span>)</span> Integer userId)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"TestMapper对应路径\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"countByUserId\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"hashmap\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span></div><div class=\"line\">        SELECT</div><div class=\"line\">        COUNT(1)</div><div class=\"line\">        FROM</div><div class=\"line\">        $&#123;tableName&#125;</div><div class=\"line\">        WHERE</div><div class=\"line\">        userId = #&#123;userId&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。</p>\n"},{"title":"杭州违章处理吐槽","date":"2016-03-15T08:52:18.000Z","_content":"买车一年半，行驶1万5公里，不算多，平时开得也比较小心，但还是吃了三张罚单，其中在火车东站就被double kill了。这几天去处理了一下，过程曲折，不得不吐槽一下\n\n1. 滨江周日处理点只有一处（鉴于党国国情，已是喜出望外），但不能当场交钱，需要自己去银行或者支付宝支付。\n2. 支付宝支付只能根据违章号一个个处理，重复操作太多。\n3. 在火车东站的两张罚单只能到<big>绍兴路64号（杭州铁路公安局交警支队机动大队）</big>，全杭州只此一家，且只有工作日上班。\n4. 铁路交警只能现场交现金，不支持刷卡和支付宝。或者可自己去<big>环城东路2号 中国工商银行(杭州城站广场支行)</big>，全杭州又只此一家，两者距离4公里\n<br />\n![screenshot.jpg](http://ww4.sinaimg.cn/large/73e6e6e1gw1f1xq3trq5xj20dd0hbaft.jpg)\n<br />\n5. 违章人多处理人少自不必说了，排队半个小是以上是妥妥的。\n\n\n回来查了一下，如果在机场违章就必须要去机场处理！！！！ 所以切记开车一定要遵守教规！！！\n\n","source":"_posts/hangzhouweizhang.md","raw":"---\ntitle: 杭州违章处理吐槽\ndate: 2016-03-15 16:52:18\n---\n买车一年半，行驶1万5公里，不算多，平时开得也比较小心，但还是吃了三张罚单，其中在火车东站就被double kill了。这几天去处理了一下，过程曲折，不得不吐槽一下\n\n1. 滨江周日处理点只有一处（鉴于党国国情，已是喜出望外），但不能当场交钱，需要自己去银行或者支付宝支付。\n2. 支付宝支付只能根据违章号一个个处理，重复操作太多。\n3. 在火车东站的两张罚单只能到<big>绍兴路64号（杭州铁路公安局交警支队机动大队）</big>，全杭州只此一家，且只有工作日上班。\n4. 铁路交警只能现场交现金，不支持刷卡和支付宝。或者可自己去<big>环城东路2号 中国工商银行(杭州城站广场支行)</big>，全杭州又只此一家，两者距离4公里\n<br />\n![screenshot.jpg](http://ww4.sinaimg.cn/large/73e6e6e1gw1f1xq3trq5xj20dd0hbaft.jpg)\n<br />\n5. 违章人多处理人少自不必说了，排队半个小是以上是妥妥的。\n\n\n回来查了一下，如果在机场违章就必须要去机场处理！！！！ 所以切记开车一定要遵守教规！！！\n\n","slug":"hangzhouweizhang","published":1,"updated":"2017-06-03T09:09:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3h2biha0003i43r8ncy8ijq","content":"<p>买车一年半，行驶1万5公里，不算多，平时开得也比较小心，但还是吃了三张罚单，其中在火车东站就被double kill了。这几天去处理了一下，过程曲折，不得不吐槽一下</p>\n<ol>\n<li>滨江周日处理点只有一处（鉴于党国国情，已是喜出望外），但不能当场交钱，需要自己去银行或者支付宝支付。</li>\n<li>支付宝支付只能根据违章号一个个处理，重复操作太多。</li>\n<li>在火车东站的两张罚单只能到<big>绍兴路64号（杭州铁路公安局交警支队机动大队）</big>，全杭州只此一家，且只有工作日上班。</li>\n<li>铁路交警只能现场交现金，不支持刷卡和支付宝。或者可自己去<big>环城东路2号 中国工商银行(杭州城站广场支行)</big>，全杭州又只此一家，两者距离4公里<br><br><br><img src=\"http://ww4.sinaimg.cn/large/73e6e6e1gw1f1xq3trq5xj20dd0hbaft.jpg\" alt=\"screenshot.jpg\"><br><br></li>\n<li>违章人多处理人少自不必说了，排队半个小是以上是妥妥的。</li>\n</ol>\n<p>回来查了一下，如果在机场违章就必须要去机场处理！！！！ 所以切记开车一定要遵守教规！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>买车一年半，行驶1万5公里，不算多，平时开得也比较小心，但还是吃了三张罚单，其中在火车东站就被double kill了。这几天去处理了一下，过程曲折，不得不吐槽一下</p>\n<ol>\n<li>滨江周日处理点只有一处（鉴于党国国情，已是喜出望外），但不能当场交钱，需要自己去银行或者支付宝支付。</li>\n<li>支付宝支付只能根据违章号一个个处理，重复操作太多。</li>\n<li>在火车东站的两张罚单只能到<big>绍兴路64号（杭州铁路公安局交警支队机动大队）</big>，全杭州只此一家，且只有工作日上班。</li>\n<li>铁路交警只能现场交现金，不支持刷卡和支付宝。或者可自己去<big>环城东路2号 中国工商银行(杭州城站广场支行)</big>，全杭州又只此一家，两者距离4公里<br><br><br><img src=\"http://ww4.sinaimg.cn/large/73e6e6e1gw1f1xq3trq5xj20dd0hbaft.jpg\" alt=\"screenshot.jpg\"><br><br></li>\n<li>违章人多处理人少自不必说了，排队半个小是以上是妥妥的。</li>\n</ol>\n<p>回来查了一下，如果在机场违章就必须要去机场处理！！！！ 所以切记开车一定要遵守教规！！！</p>\n"},{"title":"如何用C写python库","date":"2017-06-03T08:52:18.000Z","_content":"\t\n还是比较简单的，这次就权当入个门吧\n1.  写好一个C函数\n```cpp\n#include<stdio.h>\n#include<python2.7/Python.h> //默认python版本就是#include<Python.h>\n\nstatic PyObject *hellozkw(PyObject *self, PyObject *args) {\n    int num;\n    //解析参数\n    if (!PyArg_ParseTuple(args, \"i\", &num)) {\n        return Py_BuildValue(\"i\", -1);\n    }   \n\n    printf(\"hello zkw %d\\n\", num);                                                                                                                                                   \n    return Py_BuildValue(\"i\", NULL);\n}\n\nstatic PyMethodDef HMethods[] = { \n    //方法名，导出函数，参数传递方式，方法描述。\n    {\"hellozkw\", hellozkw, METH_VARARGS, \"hahahaha.... from zkw's hello\"},\n    {NULL, NULL, 0, NULL}\n};\n\nvoid inithello(void) {\n    (void) Py_InitModule(\"hello\", HMethods);\n}\n\n```\n\n2.  准备一个setup文件\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nfrom distutils.core import setup, Extension\n\nmodule = Extension('hello', sources = ['hello.c'])\n                                                                                                                                                                                     \nsetup(name = 'hello test', version = '1.0', ext_modules = [module])\n```\n3. Makefile文件\n```makefile\npublish:\n    python setup.py build\n    python setup.py install                                                                                                                                                          \n\n```\n4. 运行make publush\n5. 运行即可\n```python\n>>> import hello\n>>> ret = hello.hellozkw(123)\nhello zkw 123\n>>> ret\n0\n```\n\n","source":"_posts/如何用C写python库.md","raw":"---\ntitle: 如何用C写python库\ndate: 2017-06-03 16:52:18\n---\n\t\n还是比较简单的，这次就权当入个门吧\n1.  写好一个C函数\n```cpp\n#include<stdio.h>\n#include<python2.7/Python.h> //默认python版本就是#include<Python.h>\n\nstatic PyObject *hellozkw(PyObject *self, PyObject *args) {\n    int num;\n    //解析参数\n    if (!PyArg_ParseTuple(args, \"i\", &num)) {\n        return Py_BuildValue(\"i\", -1);\n    }   \n\n    printf(\"hello zkw %d\\n\", num);                                                                                                                                                   \n    return Py_BuildValue(\"i\", NULL);\n}\n\nstatic PyMethodDef HMethods[] = { \n    //方法名，导出函数，参数传递方式，方法描述。\n    {\"hellozkw\", hellozkw, METH_VARARGS, \"hahahaha.... from zkw's hello\"},\n    {NULL, NULL, 0, NULL}\n};\n\nvoid inithello(void) {\n    (void) Py_InitModule(\"hello\", HMethods);\n}\n\n```\n\n2.  准备一个setup文件\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nfrom distutils.core import setup, Extension\n\nmodule = Extension('hello', sources = ['hello.c'])\n                                                                                                                                                                                     \nsetup(name = 'hello test', version = '1.0', ext_modules = [module])\n```\n3. Makefile文件\n```makefile\npublish:\n    python setup.py build\n    python setup.py install                                                                                                                                                          \n\n```\n4. 运行make publush\n5. 运行即可\n```python\n>>> import hello\n>>> ret = hello.hellozkw(123)\nhello zkw 123\n>>> ret\n0\n```\n\n","slug":"如何用C写python库","published":1,"updated":"2017-06-03T09:14:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3h2bihc0004i43rfoyvnx01","content":"<p>还是比较简单的，这次就权当入个门吧</p>\n<ol>\n<li><p>写好一个C函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;python2.7/Python.h&gt; //默认python版本就是#include&lt;Python.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> PyObject *<span class=\"title\">hellozkw</span><span class=\"params\">(PyObject *self, PyObject *args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> num;</div><div class=\"line\">    <span class=\"comment\">//解析参数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!PyArg_ParseTuple(args, <span class=\"string\">\"i\"</span>, &amp;num)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Py_BuildValue(<span class=\"string\">\"i\"</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;   </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello zkw %d\\n\"</span>, num);                                                                                                                                                   </div><div class=\"line\">    <span class=\"keyword\">return</span> Py_BuildValue(<span class=\"string\">\"i\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> PyMethodDef HMethods[] = &#123; </div><div class=\"line\">    <span class=\"comment\">//方法名，导出函数，参数传递方式，方法描述。</span></div><div class=\"line\">    &#123;<span class=\"string\">\"hellozkw\"</span>, hellozkw, METH_VARARGS, <span class=\"string\">\"hahahaha.... from zkw's hello\"</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inithello</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</div><div class=\"line\">    (<span class=\"keyword\">void</span>) Py_InitModule(<span class=\"string\">\"hello\"</span>, HMethods);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>准备一个setup文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup, Extension</div><div class=\"line\"></div><div class=\"line\">module = Extension(<span class=\"string\">'hello'</span>, sources = [<span class=\"string\">'hello.c'</span>])</div><div class=\"line\">                                                                                                                                                                                     </div><div class=\"line\">setup(name = <span class=\"string\">'hello test'</span>, version = <span class=\"string\">'1.0'</span>, ext_modules = [module])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Makefile文件</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">publish:</span></div><div class=\"line\">    python setup.py build</div><div class=\"line\">    python setup.py install</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行make publush</p>\n</li>\n<li>运行即可<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> hello</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ret = hello.hellozkw(<span class=\"number\">123</span>)</div><div class=\"line\">hello zkw <span class=\"number\">123</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ret</div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>还是比较简单的，这次就权当入个门吧</p>\n<ol>\n<li><p>写好一个C函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;python2.7/Python.h&gt; //默认python版本就是#include&lt;Python.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> PyObject *<span class=\"title\">hellozkw</span><span class=\"params\">(PyObject *self, PyObject *args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> num;</div><div class=\"line\">    <span class=\"comment\">//解析参数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!PyArg_ParseTuple(args, <span class=\"string\">\"i\"</span>, &amp;num)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Py_BuildValue(<span class=\"string\">\"i\"</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;   </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello zkw %d\\n\"</span>, num);                                                                                                                                                   </div><div class=\"line\">    <span class=\"keyword\">return</span> Py_BuildValue(<span class=\"string\">\"i\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> PyMethodDef HMethods[] = &#123; </div><div class=\"line\">    <span class=\"comment\">//方法名，导出函数，参数传递方式，方法描述。</span></div><div class=\"line\">    &#123;<span class=\"string\">\"hellozkw\"</span>, hellozkw, METH_VARARGS, <span class=\"string\">\"hahahaha.... from zkw's hello\"</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inithello</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</div><div class=\"line\">    (<span class=\"keyword\">void</span>) Py_InitModule(<span class=\"string\">\"hello\"</span>, HMethods);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>准备一个setup文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup, Extension</div><div class=\"line\"></div><div class=\"line\">module = Extension(<span class=\"string\">'hello'</span>, sources = [<span class=\"string\">'hello.c'</span>])</div><div class=\"line\">                                                                                                                                                                                     </div><div class=\"line\">setup(name = <span class=\"string\">'hello test'</span>, version = <span class=\"string\">'1.0'</span>, ext_modules = [module])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Makefile文件</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">publish:</span></div><div class=\"line\">    python setup.py build</div><div class=\"line\">    python setup.py install</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行make publush</p>\n</li>\n<li>运行即可<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> hello</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ret = hello.hellozkw(<span class=\"number\">123</span>)</div><div class=\"line\">hello zkw <span class=\"number\">123</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ret</div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"使用pelican和github搭建个人blog","date":"2017-06-03T08:52:18.000Z","_content":"\n前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念\n### 1.搭建环境准备\n本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似\n### 2.涉及相关技术\n- Python2.7 及其相关\n- Pelican\n- Github\n- Markdown\n- And so on ...\n#### 2.1. Pelican\n- Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。\n- Pelican的github地址:  https://github.com/getpelican/pelican\n- Pelican 主题的github地址:  https://github.com/getpelican/pelican-themes\n\n### 3. 使用Pelican 搭建个人静态博客\n#### 3.1. 安装pelican\n``` bash\naptitude install python-pelican\n```\npython2.7 以及相关其他依赖不做介绍\n#### 3.2. 开始搭建\n输入如下命令\n``` bash\nmkdir blog\ncd blog\npelican-quickstart\n```\npelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置\n\n结束后生成目录如下\n```bash\n blog/\n ├── content              # 存放输入的Markdown文件夹\n ├── output               # 生成的输出文件\n ├── develop_server.sh    # 开启测试服务器脚本\n ├── Makefile             # 管理博客的Makefile\n ├── pelicanconf.py       # 主配置文件\n └── publishconf.py       # 主发布文件\n```\n\n####3.3. 写博客内容\n - 进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可\n - Markdown 在线编辑器推荐使用[马克飞象](https://maxiang.io/)，个人使用不错。本地编辑器使用ReText。\n - 切记在每个文件前四行输入如下\n```bash\n Title: 文章标题\n Date: 2013-04-18\n Category: 文章类别\n Tag: 标签1, 标签2\n```\n####3.4. 预览博客\n输入以下命令\n``` bash\nmake publish\nmake serve\n```\n打开浏览器，输入127.0.0.1:8000 即可看到博客\n\n####3.5. 选择主题\n[pelican-themes](https://github.com/getpelican/pelican-themes) 上有很多主题， git clone后可以使用如下命令安装任一主题\n```bash\npelican-themes -i XXXXXX\n```\n安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =\"pelican-bootstrap3\"，重启即可看到主题修改\n\n####3.6. 设置favicon.ico\nfavicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  \n\n 1.  选择图片，生成.ico文件(可直接使用网站生成如 [在线制作ico图标](http://www.bitbug.net/))\n 2.  将图片命名成favicon.ico，放置到与Makefile同级目录\n 3.  修改Makefile，添加移动favicon.ico功能\n```bash\nFAVICONICO=$(BASEDIR)/favicon.ico\n\npublish: clean                                                                                                                                                                                           \n    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)\n    cp $(FAVICONICO) $(OUTPUTDIR)\n```\n\n####3.7. 设置评论系统\n在[Disqus](https://disqus.com/admin/signup)上申请一个站点，记牢Shortname。 在pelicanconf.py添加\n```bash\nDISQUS_SITENAME = Shortname\n```\n设置后可以在每个blog下出现如此评论系统\n![disqus_comments](http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg)\n\n####3.8. 添加图片图床\n前两天一直在找一个简单易用的图床，终于找到一个推荐的[围脖是个好图床](https://weibotuchuang.sinaapp.com/)\n\n1. 进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)\n2. 安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了\n\n####3.X. 其他功能\n其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新\n\n### 4. 使用github发布博客\n原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。\n\n1. 登陆Github，创建一个名为username.github.io的版本库(必须如此格式)\n2. 将blog/output 下的内容git到username.github.io下\n3. 少等片刻，登陆http://username.github.io，会发现自己的个人博客已经生成\n\n如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了...\n\n\n","source":"_posts/pelican_blog.md","raw":"---\ntitle: 使用pelican和github搭建个人blog\ndate: 2017-06-03 16:52:18\n---\n\n前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念\n### 1.搭建环境准备\n本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似\n### 2.涉及相关技术\n- Python2.7 及其相关\n- Pelican\n- Github\n- Markdown\n- And so on ...\n#### 2.1. Pelican\n- Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。\n- Pelican的github地址:  https://github.com/getpelican/pelican\n- Pelican 主题的github地址:  https://github.com/getpelican/pelican-themes\n\n### 3. 使用Pelican 搭建个人静态博客\n#### 3.1. 安装pelican\n``` bash\naptitude install python-pelican\n```\npython2.7 以及相关其他依赖不做介绍\n#### 3.2. 开始搭建\n输入如下命令\n``` bash\nmkdir blog\ncd blog\npelican-quickstart\n```\npelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置\n\n结束后生成目录如下\n```bash\n blog/\n ├── content              # 存放输入的Markdown文件夹\n ├── output               # 生成的输出文件\n ├── develop_server.sh    # 开启测试服务器脚本\n ├── Makefile             # 管理博客的Makefile\n ├── pelicanconf.py       # 主配置文件\n └── publishconf.py       # 主发布文件\n```\n\n####3.3. 写博客内容\n - 进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可\n - Markdown 在线编辑器推荐使用[马克飞象](https://maxiang.io/)，个人使用不错。本地编辑器使用ReText。\n - 切记在每个文件前四行输入如下\n```bash\n Title: 文章标题\n Date: 2013-04-18\n Category: 文章类别\n Tag: 标签1, 标签2\n```\n####3.4. 预览博客\n输入以下命令\n``` bash\nmake publish\nmake serve\n```\n打开浏览器，输入127.0.0.1:8000 即可看到博客\n\n####3.5. 选择主题\n[pelican-themes](https://github.com/getpelican/pelican-themes) 上有很多主题， git clone后可以使用如下命令安装任一主题\n```bash\npelican-themes -i XXXXXX\n```\n安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =\"pelican-bootstrap3\"，重启即可看到主题修改\n\n####3.6. 设置favicon.ico\nfavicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  \n\n 1.  选择图片，生成.ico文件(可直接使用网站生成如 [在线制作ico图标](http://www.bitbug.net/))\n 2.  将图片命名成favicon.ico，放置到与Makefile同级目录\n 3.  修改Makefile，添加移动favicon.ico功能\n```bash\nFAVICONICO=$(BASEDIR)/favicon.ico\n\npublish: clean                                                                                                                                                                                           \n    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)\n    cp $(FAVICONICO) $(OUTPUTDIR)\n```\n\n####3.7. 设置评论系统\n在[Disqus](https://disqus.com/admin/signup)上申请一个站点，记牢Shortname。 在pelicanconf.py添加\n```bash\nDISQUS_SITENAME = Shortname\n```\n设置后可以在每个blog下出现如此评论系统\n![disqus_comments](http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg)\n\n####3.8. 添加图片图床\n前两天一直在找一个简单易用的图床，终于找到一个推荐的[围脖是个好图床](https://weibotuchuang.sinaapp.com/)\n\n1. 进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)\n2. 安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了\n\n####3.X. 其他功能\n其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新\n\n### 4. 使用github发布博客\n原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。\n\n1. 登陆Github，创建一个名为username.github.io的版本库(必须如此格式)\n2. 将blog/output 下的内容git到username.github.io下\n3. 少等片刻，登陆http://username.github.io，会发现自己的个人博客已经生成\n\n如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了...\n\n\n","slug":"pelican_blog","published":1,"updated":"2017-06-03T09:10:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3h2bihj0005i43rdu9zhn5n","content":"<p>前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念</p>\n<h3 id=\"1-搭建环境准备\"><a href=\"#1-搭建环境准备\" class=\"headerlink\" title=\"1.搭建环境准备\"></a>1.搭建环境准备</h3><p>本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似</p>\n<h3 id=\"2-涉及相关技术\"><a href=\"#2-涉及相关技术\" class=\"headerlink\" title=\"2.涉及相关技术\"></a>2.涉及相关技术</h3><ul>\n<li>Python2.7 及其相关</li>\n<li>Pelican</li>\n<li>Github</li>\n<li>Markdown</li>\n<li>And so on …<h4 id=\"2-1-Pelican\"><a href=\"#2-1-Pelican\" class=\"headerlink\" title=\"2.1. Pelican\"></a>2.1. Pelican</h4></li>\n<li>Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。</li>\n<li>Pelican的github地址:  <a href=\"https://github.com/getpelican/pelican\" target=\"_blank\" rel=\"external\">https://github.com/getpelican/pelican</a></li>\n<li>Pelican 主题的github地址:  <a href=\"https://github.com/getpelican/pelican-themes\" target=\"_blank\" rel=\"external\">https://github.com/getpelican/pelican-themes</a></li>\n</ul>\n<h3 id=\"3-使用Pelican-搭建个人静态博客\"><a href=\"#3-使用Pelican-搭建个人静态博客\" class=\"headerlink\" title=\"3. 使用Pelican 搭建个人静态博客\"></a>3. 使用Pelican 搭建个人静态博客</h3><h4 id=\"3-1-安装pelican\"><a href=\"#3-1-安装pelican\" class=\"headerlink\" title=\"3.1. 安装pelican\"></a>3.1. 安装pelican</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install python-pelican</div></pre></td></tr></table></figure>\n<p>python2.7 以及相关其他依赖不做介绍</p>\n<h4 id=\"3-2-开始搭建\"><a href=\"#3-2-开始搭建\" class=\"headerlink\" title=\"3.2. 开始搭建\"></a>3.2. 开始搭建</h4><p>输入如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir blog</div><div class=\"line\"><span class=\"built_in\">cd</span> blog</div><div class=\"line\">pelican-quickstart</div></pre></td></tr></table></figure></p>\n<p>pelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置</p>\n<p>结束后生成目录如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog/</div><div class=\"line\">├── content              <span class=\"comment\"># 存放输入的Markdown文件夹</span></div><div class=\"line\">├── output               <span class=\"comment\"># 生成的输出文件</span></div><div class=\"line\">├── develop_server.sh    <span class=\"comment\"># 开启测试服务器脚本</span></div><div class=\"line\">├── Makefile             <span class=\"comment\"># 管理博客的Makefile</span></div><div class=\"line\">├── pelicanconf.py       <span class=\"comment\"># 主配置文件</span></div><div class=\"line\">└── publishconf.py       <span class=\"comment\"># 主发布文件</span></div></pre></td></tr></table></figure></p>\n<p>####3.3. 写博客内容</p>\n<ul>\n<li>进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可</li>\n<li>Markdown 在线编辑器推荐使用<a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"external\">马克飞象</a>，个人使用不错。本地编辑器使用ReText。</li>\n<li>切记在每个文件前四行输入如下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Title: 文章标题</div><div class=\"line\">Date: 2013-04-18</div><div class=\"line\">Category: 文章类别</div><div class=\"line\">Tag: 标签1, 标签2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####3.4. 预览博客<br>输入以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make publish</div><div class=\"line\">make serve</div></pre></td></tr></table></figure></p>\n<p>打开浏览器，输入127.0.0.1:8000 即可看到博客</p>\n<p>####3.5. 选择主题<br><a href=\"https://github.com/getpelican/pelican-themes\" target=\"_blank\" rel=\"external\">pelican-themes</a> 上有很多主题， git clone后可以使用如下命令安装任一主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pelican-themes -i XXXXXX</div></pre></td></tr></table></figure></p>\n<p>安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =”pelican-bootstrap3”，重启即可看到主题修改</p>\n<p>####3.6. 设置favicon.ico<br>favicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  </p>\n<ol>\n<li>选择图片，生成.ico文件(可直接使用网站生成如 <a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">在线制作ico图标</a>)</li>\n<li>将图片命名成favicon.ico，放置到与Makefile同级目录</li>\n<li>修改Makefile，添加移动favicon.ico功能<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FAVICONICO=$(BASEDIR)/favicon.ico</div><div class=\"line\"></div><div class=\"line\">publish: clean                                                                                                                                                                                           </div><div class=\"line\">    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)</div><div class=\"line\">    cp $(FAVICONICO) $(OUTPUTDIR)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>####3.7. 设置评论系统<br>在<a href=\"https://disqus.com/admin/signup\" target=\"_blank\" rel=\"external\">Disqus</a>上申请一个站点，记牢Shortname。 在pelicanconf.py添加<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DISQUS_SITENAME = Shortname</div></pre></td></tr></table></figure></p>\n<p>设置后可以在每个blog下出现如此评论系统<br><img src=\"http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg\" alt=\"disqus_comments\"></p>\n<p>####3.8. 添加图片图床<br>前两天一直在找一个简单易用的图床，终于找到一个推荐的<a href=\"https://weibotuchuang.sinaapp.com/\" target=\"_blank\" rel=\"external\">围脖是个好图床</a></p>\n<ol>\n<li>进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)</li>\n<li>安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了</li>\n</ol>\n<p>####3.X. 其他功能<br>其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新</p>\n<h3 id=\"4-使用github发布博客\"><a href=\"#4-使用github发布博客\" class=\"headerlink\" title=\"4. 使用github发布博客\"></a>4. 使用github发布博客</h3><p>原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。</p>\n<ol>\n<li>登陆Github，创建一个名为username.github.io的版本库(必须如此格式)</li>\n<li>将blog/output 下的内容git到username.github.io下</li>\n<li>少等片刻，登陆<a href=\"http://username.github.io，会发现自己的个人博客已经生成\" target=\"_blank\" rel=\"external\">http://username.github.io，会发现自己的个人博客已经生成</a></li>\n</ol>\n<p>如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念</p>\n<h3 id=\"1-搭建环境准备\"><a href=\"#1-搭建环境准备\" class=\"headerlink\" title=\"1.搭建环境准备\"></a>1.搭建环境准备</h3><p>本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似</p>\n<h3 id=\"2-涉及相关技术\"><a href=\"#2-涉及相关技术\" class=\"headerlink\" title=\"2.涉及相关技术\"></a>2.涉及相关技术</h3><ul>\n<li>Python2.7 及其相关</li>\n<li>Pelican</li>\n<li>Github</li>\n<li>Markdown</li>\n<li>And so on …<h4 id=\"2-1-Pelican\"><a href=\"#2-1-Pelican\" class=\"headerlink\" title=\"2.1. Pelican\"></a>2.1. Pelican</h4></li>\n<li>Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。</li>\n<li>Pelican的github地址:  <a href=\"https://github.com/getpelican/pelican\" target=\"_blank\" rel=\"external\">https://github.com/getpelican/pelican</a></li>\n<li>Pelican 主题的github地址:  <a href=\"https://github.com/getpelican/pelican-themes\" target=\"_blank\" rel=\"external\">https://github.com/getpelican/pelican-themes</a></li>\n</ul>\n<h3 id=\"3-使用Pelican-搭建个人静态博客\"><a href=\"#3-使用Pelican-搭建个人静态博客\" class=\"headerlink\" title=\"3. 使用Pelican 搭建个人静态博客\"></a>3. 使用Pelican 搭建个人静态博客</h3><h4 id=\"3-1-安装pelican\"><a href=\"#3-1-安装pelican\" class=\"headerlink\" title=\"3.1. 安装pelican\"></a>3.1. 安装pelican</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install python-pelican</div></pre></td></tr></table></figure>\n<p>python2.7 以及相关其他依赖不做介绍</p>\n<h4 id=\"3-2-开始搭建\"><a href=\"#3-2-开始搭建\" class=\"headerlink\" title=\"3.2. 开始搭建\"></a>3.2. 开始搭建</h4><p>输入如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir blog</div><div class=\"line\"><span class=\"built_in\">cd</span> blog</div><div class=\"line\">pelican-quickstart</div></pre></td></tr></table></figure></p>\n<p>pelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置</p>\n<p>结束后生成目录如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog/</div><div class=\"line\">├── content              <span class=\"comment\"># 存放输入的Markdown文件夹</span></div><div class=\"line\">├── output               <span class=\"comment\"># 生成的输出文件</span></div><div class=\"line\">├── develop_server.sh    <span class=\"comment\"># 开启测试服务器脚本</span></div><div class=\"line\">├── Makefile             <span class=\"comment\"># 管理博客的Makefile</span></div><div class=\"line\">├── pelicanconf.py       <span class=\"comment\"># 主配置文件</span></div><div class=\"line\">└── publishconf.py       <span class=\"comment\"># 主发布文件</span></div></pre></td></tr></table></figure></p>\n<p>####3.3. 写博客内容</p>\n<ul>\n<li>进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可</li>\n<li>Markdown 在线编辑器推荐使用<a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"external\">马克飞象</a>，个人使用不错。本地编辑器使用ReText。</li>\n<li>切记在每个文件前四行输入如下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Title: 文章标题</div><div class=\"line\">Date: 2013-04-18</div><div class=\"line\">Category: 文章类别</div><div class=\"line\">Tag: 标签1, 标签2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####3.4. 预览博客<br>输入以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make publish</div><div class=\"line\">make serve</div></pre></td></tr></table></figure></p>\n<p>打开浏览器，输入127.0.0.1:8000 即可看到博客</p>\n<p>####3.5. 选择主题<br><a href=\"https://github.com/getpelican/pelican-themes\" target=\"_blank\" rel=\"external\">pelican-themes</a> 上有很多主题， git clone后可以使用如下命令安装任一主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pelican-themes -i XXXXXX</div></pre></td></tr></table></figure></p>\n<p>安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =”pelican-bootstrap3”，重启即可看到主题修改</p>\n<p>####3.6. 设置favicon.ico<br>favicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  </p>\n<ol>\n<li>选择图片，生成.ico文件(可直接使用网站生成如 <a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">在线制作ico图标</a>)</li>\n<li>将图片命名成favicon.ico，放置到与Makefile同级目录</li>\n<li>修改Makefile，添加移动favicon.ico功能<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FAVICONICO=$(BASEDIR)/favicon.ico</div><div class=\"line\"></div><div class=\"line\">publish: clean                                                                                                                                                                                           </div><div class=\"line\">    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)</div><div class=\"line\">    cp $(FAVICONICO) $(OUTPUTDIR)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>####3.7. 设置评论系统<br>在<a href=\"https://disqus.com/admin/signup\" target=\"_blank\" rel=\"external\">Disqus</a>上申请一个站点，记牢Shortname。 在pelicanconf.py添加<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DISQUS_SITENAME = Shortname</div></pre></td></tr></table></figure></p>\n<p>设置后可以在每个blog下出现如此评论系统<br><img src=\"http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg\" alt=\"disqus_comments\"></p>\n<p>####3.8. 添加图片图床<br>前两天一直在找一个简单易用的图床，终于找到一个推荐的<a href=\"https://weibotuchuang.sinaapp.com/\" target=\"_blank\" rel=\"external\">围脖是个好图床</a></p>\n<ol>\n<li>进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)</li>\n<li>安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了</li>\n</ol>\n<p>####3.X. 其他功能<br>其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新</p>\n<h3 id=\"4-使用github发布博客\"><a href=\"#4-使用github发布博客\" class=\"headerlink\" title=\"4. 使用github发布博客\"></a>4. 使用github发布博客</h3><p>原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。</p>\n<ol>\n<li>登陆Github，创建一个名为username.github.io的版本库(必须如此格式)</li>\n<li>将blog/output 下的内容git到username.github.io下</li>\n<li>少等片刻，登陆<a href=\"http://username.github.io，会发现自己的个人博客已经生成\" target=\"_blank\" rel=\"external\">http://username.github.io，会发现自己的个人博客已经生成</a></li>\n</ol>\n<p>如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了…</p>\n"},{"title":"protobuf 的简单介绍","date":"2016-02-29T08:52:18.000Z","_content":"\n### protobuf 是什么\nprotobuf 全称 Google Protocol Buffers，是Google公司内部的混合语言数据标准。在2008年7月7号将其作为开源项目对外公布。\n\nprotobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。\n\nprotobuf的[源码](https://github.com/google/protobuf)，protobuf的[官方文档](https://developers.google.com/protocol-buffers/docs/overview)， 有兴趣的同学可以深入研究一下\n\n\n### 为什么要使用 protobuf\nprotobuf是一种结构化数据存储格式，类似的比较常见的有xml和json。那么和他们比较，protobuf又有什么优点？\n  \n  * 后台硬，有Google开发且开源，已经在Google内部久经考验 \n  * 可通过解析器生成数据访问类，在编程中更容易使用\n  * 性能好/效率高。鉴于Google对于性能的偏执，protobuf的性能自不必说。但网上相关数据已有很多，我取了这个[例子](http://www.webrube.com/json-protobuf-web_rube/5858)\n  \n    > 100个logs， 序列化5000次所需时间（秒）. 越小越好\n   \n    | Language        | Protobuf           | Json  |\n    | ------------- |:-------------:| -----:|\n    | Python      | 15.13 | 0.88 |\n    | CSharp      | 0.23      |   1.80  |\n    \n    > 100个logs， 反序列化5000次所需时间（秒）. 越小越好\n   \n    | Language        | Protobuf           | Json  |\n    | ------------- |:-------------:| -----:|\n    | Python      |   8.14    |  1.40  |\n    | CSharp      | 0.47    |  4.37  |\n\n### 怎么样使用 protobuf\n目前protobuf的官方教程支持C++，C#，Go，Java以及Python。官方自带的example也比较详细\n#### 查看github上的example\n1. 首先安装protobuf， 有多种方案，我选择从github上下载源码后编译安装\n1. 根据源码中的README.txt 运行./autogen.sh， 随后./configure;  make;  make install (可能会缺少一些依赖，根据提示安装即可)\n1. cd example, 根据需要的cpp java python对应的make即可看到例子。\n\n#### 以cpp为例子\n-  先写一个.proto后缀的文件\n``` java\nmessage Person {\n    string name = 1;\n    int32 id = 2; \n    string email = 3;\n}\n``` \n-  使用protoc 命令生成对应的.h和.cc文件(这里的.cc即.c文件， 如其他的语言也会生成对应的文件，查看github example)\n``` bash\n protoc --cpp_out=$DIR  ${xxxx}.proto\n``` \n- 编写写和读的程序\n序列化写入文件的代码\n``` cpp\n#include <iostream>                                                                                                                                                                                          \n#include <fstream>\n#include <string>\n#include \"person.pb.h\"\nusing namespace std;\n\nvoid PromptForPerson(mytest::Person* person) {\n  cout << \"Enter person ID number: \";\n  int id; \n  cin >> id; \n  person->set_id(id);\n  cin.ignore(256, '\\n');\n\n  cout << \"Enter name: \";\n  getline(cin, *person->mutable_name());\n}\n\nint main(int argc, char* argv[]) {\n  if (argc != 2) {\n    cerr << \"Usage:  \" << argv[0] << \" FILE\" << endl;\n    return -1; \n  }\n\n  mytest::Person person;\n\n  {\n    fstream input(argv[1], ios::in | ios::binary);\n    if (!input) {\n      cout << argv[1] << \": File not found.  Creating a new file.\" << endl;\n    } else if (!person.ParseFromIstream(&input)) {\n      cerr << \"Failed to parse address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  PromptForPerson(&person);\n\n  {\n    fstream output(argv[1], ios::out | ios::trunc | ios::binary);\n    if (!person.SerializeToOstream(&output)) {\n      cerr << \"Failed to write address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  google::protobuf::ShutdownProtobufLibrary();\n\n  return 0;\n}\n```\n反序列化读取文件的代码\n\n``` cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include \"person.pb.h\"\nusing namespace std;\n\nvoid ListPeople(const mytest::Person& person) {\n    cout << \"Person ID: \" << person.id() << endl;\n    cout << \"Name: \" << person.name() << endl;\n}\n\nint main(int argc, char* argv[]) {\n  if (argc != 2) {                                                                                                                                                                                           \n    cerr << \"Usage:  \" << argv[0] << \" ADDRESS_BOOK_FILE\" << endl;\n    return -1; \n  }\n\n  mytest::Person person;\n\n  {\n    fstream input(argv[1], ios::in | ios::binary);\n    if (!person.ParseFromIstream(&input)) {\n      cerr << \"Failed to parse address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  ListPeople(person);\n\n  google::protobuf::ShutdownProtobufLibrary();\n\n  return 0;\n}\n```\n- 编译程序\n``` bash\ng++ add_person.cc person.pb.cc -o add_person -pthread -I/usr/local/include  -pthread -L/usr/local/lib -lprotobuf -lpthread\ng++ list_person.cc person.pb.cc -o list_person -pthread -I/usr/local/include  -pthread -L/usr/local/lib -lprotobuf -lpthread\n``` \n- 运行程序\n``` bash\n./add_person file_name\n./list_person file_name\n```\n- 与json文件比较\n``` bash\nzhu_kewei@PC0247:~/work/test/protobuf/examples/mytest$ ls -l xx*\n-rw-rw-r-- 1 zhu_kewei zhu_kewei  7  3月  4 14:12 xx\n-rw-rw-r-- 1 zhu_kewei zhu_kewei 27  3月  4 14:16 xx.json\n```\n- 可以看到用proto序列化后比json文件小\n\n\n","source":"_posts/protobuf_stu.md","raw":"---\ntitle: protobuf 的简单介绍\ndate: 2016-02-29 16:52:18\n---\n\n### protobuf 是什么\nprotobuf 全称 Google Protocol Buffers，是Google公司内部的混合语言数据标准。在2008年7月7号将其作为开源项目对外公布。\n\nprotobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。\n\nprotobuf的[源码](https://github.com/google/protobuf)，protobuf的[官方文档](https://developers.google.com/protocol-buffers/docs/overview)， 有兴趣的同学可以深入研究一下\n\n\n### 为什么要使用 protobuf\nprotobuf是一种结构化数据存储格式，类似的比较常见的有xml和json。那么和他们比较，protobuf又有什么优点？\n  \n  * 后台硬，有Google开发且开源，已经在Google内部久经考验 \n  * 可通过解析器生成数据访问类，在编程中更容易使用\n  * 性能好/效率高。鉴于Google对于性能的偏执，protobuf的性能自不必说。但网上相关数据已有很多，我取了这个[例子](http://www.webrube.com/json-protobuf-web_rube/5858)\n  \n    > 100个logs， 序列化5000次所需时间（秒）. 越小越好\n   \n    | Language        | Protobuf           | Json  |\n    | ------------- |:-------------:| -----:|\n    | Python      | 15.13 | 0.88 |\n    | CSharp      | 0.23      |   1.80  |\n    \n    > 100个logs， 反序列化5000次所需时间（秒）. 越小越好\n   \n    | Language        | Protobuf           | Json  |\n    | ------------- |:-------------:| -----:|\n    | Python      |   8.14    |  1.40  |\n    | CSharp      | 0.47    |  4.37  |\n\n### 怎么样使用 protobuf\n目前protobuf的官方教程支持C++，C#，Go，Java以及Python。官方自带的example也比较详细\n#### 查看github上的example\n1. 首先安装protobuf， 有多种方案，我选择从github上下载源码后编译安装\n1. 根据源码中的README.txt 运行./autogen.sh， 随后./configure;  make;  make install (可能会缺少一些依赖，根据提示安装即可)\n1. cd example, 根据需要的cpp java python对应的make即可看到例子。\n\n#### 以cpp为例子\n-  先写一个.proto后缀的文件\n``` java\nmessage Person {\n    string name = 1;\n    int32 id = 2; \n    string email = 3;\n}\n``` \n-  使用protoc 命令生成对应的.h和.cc文件(这里的.cc即.c文件， 如其他的语言也会生成对应的文件，查看github example)\n``` bash\n protoc --cpp_out=$DIR  ${xxxx}.proto\n``` \n- 编写写和读的程序\n序列化写入文件的代码\n``` cpp\n#include <iostream>                                                                                                                                                                                          \n#include <fstream>\n#include <string>\n#include \"person.pb.h\"\nusing namespace std;\n\nvoid PromptForPerson(mytest::Person* person) {\n  cout << \"Enter person ID number: \";\n  int id; \n  cin >> id; \n  person->set_id(id);\n  cin.ignore(256, '\\n');\n\n  cout << \"Enter name: \";\n  getline(cin, *person->mutable_name());\n}\n\nint main(int argc, char* argv[]) {\n  if (argc != 2) {\n    cerr << \"Usage:  \" << argv[0] << \" FILE\" << endl;\n    return -1; \n  }\n\n  mytest::Person person;\n\n  {\n    fstream input(argv[1], ios::in | ios::binary);\n    if (!input) {\n      cout << argv[1] << \": File not found.  Creating a new file.\" << endl;\n    } else if (!person.ParseFromIstream(&input)) {\n      cerr << \"Failed to parse address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  PromptForPerson(&person);\n\n  {\n    fstream output(argv[1], ios::out | ios::trunc | ios::binary);\n    if (!person.SerializeToOstream(&output)) {\n      cerr << \"Failed to write address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  google::protobuf::ShutdownProtobufLibrary();\n\n  return 0;\n}\n```\n反序列化读取文件的代码\n\n``` cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include \"person.pb.h\"\nusing namespace std;\n\nvoid ListPeople(const mytest::Person& person) {\n    cout << \"Person ID: \" << person.id() << endl;\n    cout << \"Name: \" << person.name() << endl;\n}\n\nint main(int argc, char* argv[]) {\n  if (argc != 2) {                                                                                                                                                                                           \n    cerr << \"Usage:  \" << argv[0] << \" ADDRESS_BOOK_FILE\" << endl;\n    return -1; \n  }\n\n  mytest::Person person;\n\n  {\n    fstream input(argv[1], ios::in | ios::binary);\n    if (!person.ParseFromIstream(&input)) {\n      cerr << \"Failed to parse address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  ListPeople(person);\n\n  google::protobuf::ShutdownProtobufLibrary();\n\n  return 0;\n}\n```\n- 编译程序\n``` bash\ng++ add_person.cc person.pb.cc -o add_person -pthread -I/usr/local/include  -pthread -L/usr/local/lib -lprotobuf -lpthread\ng++ list_person.cc person.pb.cc -o list_person -pthread -I/usr/local/include  -pthread -L/usr/local/lib -lprotobuf -lpthread\n``` \n- 运行程序\n``` bash\n./add_person file_name\n./list_person file_name\n```\n- 与json文件比较\n``` bash\nzhu_kewei@PC0247:~/work/test/protobuf/examples/mytest$ ls -l xx*\n-rw-rw-r-- 1 zhu_kewei zhu_kewei  7  3月  4 14:12 xx\n-rw-rw-r-- 1 zhu_kewei zhu_kewei 27  3月  4 14:16 xx.json\n```\n- 可以看到用proto序列化后比json文件小\n\n\n","slug":"protobuf_stu","published":1,"updated":"2017-06-03T09:11:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3h2bihl0006i43rn9j1tles","content":"<h3 id=\"protobuf-是什么\"><a href=\"#protobuf-是什么\" class=\"headerlink\" title=\"protobuf 是什么\"></a>protobuf 是什么</h3><p>protobuf 全称 Google Protocol Buffers，是Google公司内部的混合语言数据标准。在2008年7月7号将其作为开源项目对外公布。</p>\n<p>protobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>\n<p>protobuf的<a href=\"https://github.com/google/protobuf\" target=\"_blank\" rel=\"external\">源码</a>，protobuf的<a href=\"https://developers.google.com/protocol-buffers/docs/overview\" target=\"_blank\" rel=\"external\">官方文档</a>， 有兴趣的同学可以深入研究一下</p>\n<h3 id=\"为什么要使用-protobuf\"><a href=\"#为什么要使用-protobuf\" class=\"headerlink\" title=\"为什么要使用 protobuf\"></a>为什么要使用 protobuf</h3><p>protobuf是一种结构化数据存储格式，类似的比较常见的有xml和json。那么和他们比较，protobuf又有什么优点？</p>\n<ul>\n<li>后台硬，有Google开发且开源，已经在Google内部久经考验 </li>\n<li>可通过解析器生成数据访问类，在编程中更容易使用</li>\n<li><p>性能好/效率高。鉴于Google对于性能的偏执，protobuf的性能自不必说。但网上相关数据已有很多，我取了这个<a href=\"http://www.webrube.com/json-protobuf-web_rube/5858\" target=\"_blank\" rel=\"external\">例子</a></p>\n<blockquote>\n<p>100个logs， 序列化5000次所需时间（秒）. 越小越好</p>\n</blockquote>\n<p>| Language        | Protobuf           | Json  |<br>| ————- |:————-:| —–:|<br>| Python      | 15.13 | 0.88 |<br>| CSharp      | 0.23      |   1.80  |</p>\n<blockquote>\n<p>100个logs， 反序列化5000次所需时间（秒）. 越小越好</p>\n</blockquote>\n<p>| Language        | Protobuf           | Json  |<br>| ————- |:————-:| —–:|<br>| Python      |   8.14    |  1.40  |<br>| CSharp      | 0.47    |  4.37  |</p>\n</li>\n</ul>\n<h3 id=\"怎么样使用-protobuf\"><a href=\"#怎么样使用-protobuf\" class=\"headerlink\" title=\"怎么样使用 protobuf\"></a>怎么样使用 protobuf</h3><p>目前protobuf的官方教程支持C++，C#，Go，Java以及Python。官方自带的example也比较详细</p>\n<h4 id=\"查看github上的example\"><a href=\"#查看github上的example\" class=\"headerlink\" title=\"查看github上的example\"></a>查看github上的example</h4><ol>\n<li>首先安装protobuf， 有多种方案，我选择从github上下载源码后编译安装</li>\n<li>根据源码中的README.txt 运行./autogen.sh， 随后./configure;  make;  make install (可能会缺少一些依赖，根据提示安装即可)</li>\n<li>cd example, 根据需要的cpp java python对应的make即可看到例子。</li>\n</ol>\n<h4 id=\"以cpp为例子\"><a href=\"#以cpp为例子\" class=\"headerlink\" title=\"以cpp为例子\"></a>以cpp为例子</h4><ul>\n<li>先写一个.proto后缀的文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">message Person &#123;</div><div class=\"line\">    string name = 1;</div><div class=\"line\">    int32 id = 2; </div><div class=\"line\">    string email = 3;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\">-  使用protoc 命令生成对应的.h和.cc文件(这里的.cc即.c文件， 如其他的语言也会生成对应的文件，查看github example)</div><div class=\"line\">``` bash</div><div class=\"line\"> protoc --cpp_out=$DIR  $&#123;xxxx&#125;.proto</div><div class=\"line\">``` </div><div class=\"line\">- 编写写和读的程序</div><div class=\"line\">序列化写入文件的代码</div><div class=\"line\">``` cpp</div><div class=\"line\">#include &lt;iostream&gt;                                                                                                                                                                                          </div><div class=\"line\">#include &lt;fstream&gt;</div><div class=\"line\">#include &lt;string&gt;</div><div class=\"line\">#include \"person.pb.h\"</div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">void PromptForPerson(mytest::Person* person) &#123;</div><div class=\"line\">  cout &lt;&lt; \"Enter person ID number: \";</div><div class=\"line\">  int id; </div><div class=\"line\">  cin &gt;&gt; id; </div><div class=\"line\">  person-&gt;set_id(id);</div><div class=\"line\">  cin.ignore(256, '\\n');</div><div class=\"line\"></div><div class=\"line\">  cout &lt;&lt; \"Enter name: \";</div><div class=\"line\">  getline(cin, *person-&gt;mutable_name());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char* argv[]) &#123;</div><div class=\"line\">  if (argc != 2) &#123;</div><div class=\"line\">    cerr &lt;&lt; \"Usage:  \" &lt;&lt; argv[0] &lt;&lt; \" FILE\" &lt;&lt; endl;</div><div class=\"line\">    return -1; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  mytest::Person person;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    fstream input(argv[1], ios::in | ios::binary);</div><div class=\"line\">    if (!input) &#123;</div><div class=\"line\">      cout &lt;&lt; argv[1] &lt;&lt; \": File not found.  Creating a new file.\" &lt;&lt; endl;</div><div class=\"line\">    &#125; else if (!person.ParseFromIstream(&amp;input)) &#123;</div><div class=\"line\">      cerr &lt;&lt; \"Failed to parse address book.\" &lt;&lt; endl;</div><div class=\"line\">      return -1; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  PromptForPerson(&amp;person);</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    fstream output(argv[1], ios::out | ios::trunc | ios::binary);</div><div class=\"line\">    if (!person.SerializeToOstream(&amp;output)) &#123;</div><div class=\"line\">      cerr &lt;&lt; \"Failed to write address book.\" &lt;&lt; endl;</div><div class=\"line\">      return -1; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  google::protobuf::ShutdownProtobufLibrary();</div><div class=\"line\"></div><div class=\"line\">  return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>反序列化读取文件的代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"person.pb.h\"</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ListPeople</span><span class=\"params\">(<span class=\"keyword\">const</span> mytest::Person&amp; person)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person ID: \"</span> &lt;&lt; person.id() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Name: \"</span> &lt;&lt; person.name() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;                                                                                                                                                                                           </div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Usage:  \"</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\" ADDRESS_BOOK_FILE\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  mytest::Person person;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"function\">fstream <span class=\"title\">input</span><span class=\"params\">(argv[<span class=\"number\">1</span>], ios::in | ios::binary)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!person.ParseFromIstream(&amp;input)) &#123;</div><div class=\"line\">      <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Failed to parse address book.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ListPeople(person);</div><div class=\"line\"></div><div class=\"line\">  google::protobuf::ShutdownProtobufLibrary();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>编译程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">g++ add_person.cc person.pb.cc -o add_person -pthread -I/usr/<span class=\"built_in\">local</span>/include  -pthread -L/usr/<span class=\"built_in\">local</span>/lib -lprotobuf -lpthread</div><div class=\"line\">g++ list_person.cc person.pb.cc -o list_person -pthread -I/usr/<span class=\"built_in\">local</span>/include  -pthread -L/usr/<span class=\"built_in\">local</span>/lib -lprotobuf -lpthread</div><div class=\"line\">``` </div><div class=\"line\">- 运行程序</div><div class=\"line\">``` bash</div><div class=\"line\">./add_person file_name</div><div class=\"line\">./list_person file_name</div></pre></td></tr></table></figure>\n</li>\n<li><p>与json文件比较</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">zhu_kewei@PC0247:~/work/<span class=\"built_in\">test</span>/protobuf/examples/mytest$ ls -l xx*</div><div class=\"line\">-rw-rw-r-- 1 zhu_kewei zhu_kewei  7  3月  4 14:12 xx</div><div class=\"line\">-rw-rw-r-- 1 zhu_kewei zhu_kewei 27  3月  4 14:16 xx.json</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以看到用proto序列化后比json文件小</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"protobuf-是什么\"><a href=\"#protobuf-是什么\" class=\"headerlink\" title=\"protobuf 是什么\"></a>protobuf 是什么</h3><p>protobuf 全称 Google Protocol Buffers，是Google公司内部的混合语言数据标准。在2008年7月7号将其作为开源项目对外公布。</p>\n<p>protobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>\n<p>protobuf的<a href=\"https://github.com/google/protobuf\" target=\"_blank\" rel=\"external\">源码</a>，protobuf的<a href=\"https://developers.google.com/protocol-buffers/docs/overview\" target=\"_blank\" rel=\"external\">官方文档</a>， 有兴趣的同学可以深入研究一下</p>\n<h3 id=\"为什么要使用-protobuf\"><a href=\"#为什么要使用-protobuf\" class=\"headerlink\" title=\"为什么要使用 protobuf\"></a>为什么要使用 protobuf</h3><p>protobuf是一种结构化数据存储格式，类似的比较常见的有xml和json。那么和他们比较，protobuf又有什么优点？</p>\n<ul>\n<li>后台硬，有Google开发且开源，已经在Google内部久经考验 </li>\n<li>可通过解析器生成数据访问类，在编程中更容易使用</li>\n<li><p>性能好/效率高。鉴于Google对于性能的偏执，protobuf的性能自不必说。但网上相关数据已有很多，我取了这个<a href=\"http://www.webrube.com/json-protobuf-web_rube/5858\" target=\"_blank\" rel=\"external\">例子</a></p>\n<blockquote>\n<p>100个logs， 序列化5000次所需时间（秒）. 越小越好</p>\n</blockquote>\n<p>| Language        | Protobuf           | Json  |<br>| ————- |:————-:| —–:|<br>| Python      | 15.13 | 0.88 |<br>| CSharp      | 0.23      |   1.80  |</p>\n<blockquote>\n<p>100个logs， 反序列化5000次所需时间（秒）. 越小越好</p>\n</blockquote>\n<p>| Language        | Protobuf           | Json  |<br>| ————- |:————-:| —–:|<br>| Python      |   8.14    |  1.40  |<br>| CSharp      | 0.47    |  4.37  |</p>\n</li>\n</ul>\n<h3 id=\"怎么样使用-protobuf\"><a href=\"#怎么样使用-protobuf\" class=\"headerlink\" title=\"怎么样使用 protobuf\"></a>怎么样使用 protobuf</h3><p>目前protobuf的官方教程支持C++，C#，Go，Java以及Python。官方自带的example也比较详细</p>\n<h4 id=\"查看github上的example\"><a href=\"#查看github上的example\" class=\"headerlink\" title=\"查看github上的example\"></a>查看github上的example</h4><ol>\n<li>首先安装protobuf， 有多种方案，我选择从github上下载源码后编译安装</li>\n<li>根据源码中的README.txt 运行./autogen.sh， 随后./configure;  make;  make install (可能会缺少一些依赖，根据提示安装即可)</li>\n<li>cd example, 根据需要的cpp java python对应的make即可看到例子。</li>\n</ol>\n<h4 id=\"以cpp为例子\"><a href=\"#以cpp为例子\" class=\"headerlink\" title=\"以cpp为例子\"></a>以cpp为例子</h4><ul>\n<li>先写一个.proto后缀的文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">message Person &#123;</div><div class=\"line\">    string name = 1;</div><div class=\"line\">    int32 id = 2; </div><div class=\"line\">    string email = 3;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\">-  使用protoc 命令生成对应的.h和.cc文件(这里的.cc即.c文件， 如其他的语言也会生成对应的文件，查看github example)</div><div class=\"line\">``` bash</div><div class=\"line\"> protoc --cpp_out=$DIR  $&#123;xxxx&#125;.proto</div><div class=\"line\">``` </div><div class=\"line\">- 编写写和读的程序</div><div class=\"line\">序列化写入文件的代码</div><div class=\"line\">``` cpp</div><div class=\"line\">#include &lt;iostream&gt;                                                                                                                                                                                          </div><div class=\"line\">#include &lt;fstream&gt;</div><div class=\"line\">#include &lt;string&gt;</div><div class=\"line\">#include \"person.pb.h\"</div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">void PromptForPerson(mytest::Person* person) &#123;</div><div class=\"line\">  cout &lt;&lt; \"Enter person ID number: \";</div><div class=\"line\">  int id; </div><div class=\"line\">  cin &gt;&gt; id; </div><div class=\"line\">  person-&gt;set_id(id);</div><div class=\"line\">  cin.ignore(256, '\\n');</div><div class=\"line\"></div><div class=\"line\">  cout &lt;&lt; \"Enter name: \";</div><div class=\"line\">  getline(cin, *person-&gt;mutable_name());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char* argv[]) &#123;</div><div class=\"line\">  if (argc != 2) &#123;</div><div class=\"line\">    cerr &lt;&lt; \"Usage:  \" &lt;&lt; argv[0] &lt;&lt; \" FILE\" &lt;&lt; endl;</div><div class=\"line\">    return -1; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  mytest::Person person;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    fstream input(argv[1], ios::in | ios::binary);</div><div class=\"line\">    if (!input) &#123;</div><div class=\"line\">      cout &lt;&lt; argv[1] &lt;&lt; \": File not found.  Creating a new file.\" &lt;&lt; endl;</div><div class=\"line\">    &#125; else if (!person.ParseFromIstream(&amp;input)) &#123;</div><div class=\"line\">      cerr &lt;&lt; \"Failed to parse address book.\" &lt;&lt; endl;</div><div class=\"line\">      return -1; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  PromptForPerson(&amp;person);</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    fstream output(argv[1], ios::out | ios::trunc | ios::binary);</div><div class=\"line\">    if (!person.SerializeToOstream(&amp;output)) &#123;</div><div class=\"line\">      cerr &lt;&lt; \"Failed to write address book.\" &lt;&lt; endl;</div><div class=\"line\">      return -1; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  google::protobuf::ShutdownProtobufLibrary();</div><div class=\"line\"></div><div class=\"line\">  return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>反序列化读取文件的代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"person.pb.h\"</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ListPeople</span><span class=\"params\">(<span class=\"keyword\">const</span> mytest::Person&amp; person)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person ID: \"</span> &lt;&lt; person.id() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Name: \"</span> &lt;&lt; person.name() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;                                                                                                                                                                                           </div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Usage:  \"</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\" ADDRESS_BOOK_FILE\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  mytest::Person person;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"function\">fstream <span class=\"title\">input</span><span class=\"params\">(argv[<span class=\"number\">1</span>], ios::in | ios::binary)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!person.ParseFromIstream(&amp;input)) &#123;</div><div class=\"line\">      <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Failed to parse address book.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ListPeople(person);</div><div class=\"line\"></div><div class=\"line\">  google::protobuf::ShutdownProtobufLibrary();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>编译程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">g++ add_person.cc person.pb.cc -o add_person -pthread -I/usr/<span class=\"built_in\">local</span>/include  -pthread -L/usr/<span class=\"built_in\">local</span>/lib -lprotobuf -lpthread</div><div class=\"line\">g++ list_person.cc person.pb.cc -o list_person -pthread -I/usr/<span class=\"built_in\">local</span>/include  -pthread -L/usr/<span class=\"built_in\">local</span>/lib -lprotobuf -lpthread</div><div class=\"line\">``` </div><div class=\"line\">- 运行程序</div><div class=\"line\">``` bash</div><div class=\"line\">./add_person file_name</div><div class=\"line\">./list_person file_name</div></pre></td></tr></table></figure>\n</li>\n<li><p>与json文件比较</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">zhu_kewei@PC0247:~/work/<span class=\"built_in\">test</span>/protobuf/examples/mytest$ ls -l xx*</div><div class=\"line\">-rw-rw-r-- 1 zhu_kewei zhu_kewei  7  3月  4 14:12 xx</div><div class=\"line\">-rw-rw-r-- 1 zhu_kewei zhu_kewei 27  3月  4 14:16 xx.json</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以看到用proto序列化后比json文件小</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}