{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif.source","path":"images/avatar.gif.source","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"aebda47a1fdbff5759d3cff9fb7b549b486117d4","modified":1496491645000},{"_id":"source/_posts/Mybatis 动态传入表名进行sql查询.md","hash":"86fd42437e42938db9e782d3397085c079524791","modified":1496490807000},{"_id":"source/_posts/hangzhouweizhang.md","hash":"aaaa3af84bd0a544b77afd274ca0cce7f8aeed28","modified":1496490771000},{"_id":"source/_posts/protobuf_stu.md","hash":"39269bab307fd3f34a2934a177cab0873180a07e","modified":1496490856000},{"_id":"source/_posts/pelican_blog.md","hash":"856e6ef9ed9fec9d13eea19260d406158d87a639","modified":1496490844000},{"_id":"source/_posts/如何用C写python库.md","hash":"638fc27938a59e31e7258d9d6400b0168ddfa7e0","modified":1496490709000},{"_id":"source/about/index.md","hash":"6c1bfbbd9cec552032436321bab5c488bc953afc","modified":1496491725000},{"_id":"source/_posts/Java_native.md","hash":"7049957a9fe7aa27495826b9339c818052bac5b1","modified":1496490791000},{"_id":"source/tags/index.md","hash":"409618ceec05577e6ac409322d7035b705f6406c","modified":1496490680000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1496481632000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1496481632000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1496481632000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1496481632000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1496481632000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1496481632000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1496481632000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1496481632000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1496481632000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1496481632000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1496481632000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1496481632000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1496481632000},{"_id":"themes/next/_config.yml","hash":"0d92a539dfd7ec1a1c1199d211ab711822da4db1","modified":1496493928000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1496481632000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1496481632000},{"_id":"themes/next/source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1496493130000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1496481632000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1496481632000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1496481632000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1496481632000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1496481632000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1496481632000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1496481632000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1496481632000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1496481632000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1496481632000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1496481632000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1496481632000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1496481632000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1496481632000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1496481632000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1496481632000},{"_id":"themes/next/layout/_layout.swig","hash":"b8f48622bd11253319741f4d383a3505cad3b9b5","modified":1496491271000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1496481632000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1496481632000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1496481632000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1496481632000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1496481632000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1496481632000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1496481632000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496481632000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1496481632000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1496481632000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1496481632000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1496481632000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1496481632000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1496481632000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1496481632000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1496481632000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1496481632000},{"_id":"themes/next/source/images/avatar.gif.source","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1496493179000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1496481632000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1496481632000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1496481632000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1496481632000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1496481632000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1496481632000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1496481632000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1496481632000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496481632000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496481632000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1496481632000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496481632000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496481632000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1496481632000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1496481632000},{"_id":"themes/next/layout/_macro/post.swig","hash":"9481f43ed356e00df7b519e92ad0becebc9e1505","modified":1496481632000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1496481632000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a2b213c1a7c37cd6e4749f2018371f4c1f4f0d23","modified":1496481632000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1496481632000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496481632000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1496481632000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1496481632000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1496481632000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1496481632000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1496481632000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1496481632000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1496481632000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1496481632000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1496481632000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1496481632000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1496481632000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1496481632000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1496481632000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1496481632000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1496481632000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1496481632000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496481632000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496481632000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496481632000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496481632000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496481632000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496481632000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496481632000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1496481632000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1496481632000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1496481632000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1496481632000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1496481632000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1496481632000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496481632000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1496481632000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1496481632000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1496481632000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1496481632000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1496481632000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1496481632000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1496481632000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1496481632000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496481632000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1496481632000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1496481632000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496481632000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1496481632000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1496481632000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1496481632000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1496481632000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496481632000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496481632000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496481632000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496481632000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496481632000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496481632000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496481632000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496481632000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1496481632000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496481632000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496481632000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1496481632000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496481632000},{"_id":"themes/next/source/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1496481632000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1496481632000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1496481632000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1496481632000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1496481632000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1496481632000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1496481632000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1496481632000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1496481632000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1496481632000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1496481632000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1496481632000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1496481632000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1496481632000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1496481632000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1496481632000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1496481632000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1496481632000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1496481632000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1496481632000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1496481632000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1496481632000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1496481632000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1496481632000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1496481632000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1496481632000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1496481632000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"1f349aa30dd1f7022f7d07a1f085eea5ace3f26d","modified":1496481632000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496481632000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1496481632000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1496481632000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1496481632000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1496481632000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1496481632000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1496481632000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1496481632000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496481632000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496481632000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496481632000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496481632000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496481632000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1496481632000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1496481632000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1496481632000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1496481632000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1496481632000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1496492949000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1496481632000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496481632000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496481632000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496481632000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496481632000},{"_id":"themes/next/source/images/avatar.gif","hash":"2e80c19676ccaa399a79ae31f07fef05aeeb8389","modified":1496493164000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496481632000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496481632000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496481632000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496481632000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496481632000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496481632000},{"_id":"public/baidusitemap.xml","hash":"4d044dd347a1b66cb456294dd82e4a5d83834a04","modified":1497409891172},{"_id":"public/atom.xml","hash":"64a36ef708275e9cde6407cbaf6844814b70b3d9","modified":1497409891181},{"_id":"public/sitemap.xml","hash":"04ab4f0f5d218baf693ec47a85ac4d5f6b8e22f9","modified":1497409891181},{"_id":"public/about/index.html","hash":"d9bd2fbd540b13c7b0ea08538444e99df1a59bc6","modified":1497409891209},{"_id":"public/tags/index.html","hash":"f3c02e5fc2cc3e84e585cbccd5f8bca199e9f6b1","modified":1497409891209},{"_id":"public/archives/index.html","hash":"36d4100ee90791b32b121a0daafbab2e7355e707","modified":1497409891210},{"_id":"public/archives/2016/index.html","hash":"3dd20fb89e4db40c5aa7f1979943d25e14f4a57d","modified":1497409891210},{"_id":"public/archives/2016/02/index.html","hash":"f9ec2e1d6fbeab5fa3015ba5860b4578983e34c4","modified":1497409891210},{"_id":"public/archives/2016/03/index.html","hash":"37b43bc4d333bfb9cebfd7b87c89605aed351155","modified":1497409891210},{"_id":"public/archives/2016/04/index.html","hash":"d1130818ebd5ed16add837d875825270d1b817f2","modified":1497409891210},{"_id":"public/archives/2016/07/index.html","hash":"0923a1b78a875d18531a088d2289352aa1b85322","modified":1497409891210},{"_id":"public/archives/2017/index.html","hash":"4f86f6258fa35cd238a3658c2d882425379f9acf","modified":1497409891210},{"_id":"public/archives/2017/05/index.html","hash":"04c99e9f3f06a6973faef73943745a8c84e0a639","modified":1497409891210},{"_id":"public/archives/2017/06/index.html","hash":"f6b6b10355604ad909f70c48132aab071bd3c023","modified":1497409891210},{"_id":"public/tags/java/index.html","hash":"91678172a0a7a2ce8a4914176f0eb43141e0f43f","modified":1497409891210},{"_id":"public/tags/mybatis/index.html","hash":"41f17edd018f6d0214257a8f9175498b401c58fc","modified":1497409891210},{"_id":"public/tags/life/index.html","hash":"19c85d8b2bd6faed4f9c8c600c718e77729a745e","modified":1497409891210},{"_id":"public/tags/hangzhou/index.html","hash":"12b13ecf60e3e0ab9de67bd9cbdad5db7bb94983","modified":1497409891210},{"_id":"public/tags/protobuf/index.html","hash":"8ec7d04d1be9b49664c3a622c5a9a5f2003cf87a","modified":1497409891210},{"_id":"public/tags/blog/index.html","hash":"a4af4df8dfa7a6b0df7f9b15ff92c8413a9f9fb4","modified":1497409891210},{"_id":"public/tags/pelican/index.html","hash":"3d22dc6c3c0f8ad8cbbe726845538df3c370a34f","modified":1497409891210},{"_id":"public/tags/python/index.html","hash":"749746d9a89fe719503779f71a7fb1ebb0dc3690","modified":1497409891210},{"_id":"public/tags/native/index.html","hash":"c9096816bd16585e9c6e73a5abe786476fc041c9","modified":1497409891210},{"_id":"public/2017/06/03/如何用C写python库/index.html","hash":"c457d38760d54db09bd8ead3c8a85c3799a5b5b2","modified":1497409891210},{"_id":"public/2017/05/13/Mybatis 动态传入表名进行sql查询/index.html","hash":"0c77899f50ec281b0c43112ae38b9736f2e7b061","modified":1497409891210},{"_id":"public/2016/07/03/Java_native/index.html","hash":"a844d5f680ebcd117e5e281aeae2a4d119d1feb4","modified":1497409891211},{"_id":"public/2016/04/13/pelican_blog/index.html","hash":"15005678dd7fad347980d810ba972f8aff79c8be","modified":1497409891211},{"_id":"public/2016/03/15/hangzhouweizhang/index.html","hash":"352b24f3c8d2b38ace9597aee66a2c56fe9342e4","modified":1497409891211},{"_id":"public/2016/02/29/protobuf_stu/index.html","hash":"57a752f5279f3ad5edeebb4db998a9539e526124","modified":1497409891211},{"_id":"public/index.html","hash":"2d747d07377fea538ba34d290f059ab9dd58bf6d","modified":1497409891211},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1497409891233},{"_id":"public/images/avatar.gif.source","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1497409891233},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1497409891234},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1497409891234},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1497409891234},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1497409891234},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1497409891234},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1497409891234},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1497409891234},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1497409891234},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497409891234},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497409891234},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1497409891234},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497409891234},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1497409891234},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1497409891234},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497409891234},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497409891234},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497409891234},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497409891234},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497409891234},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497409891234},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1497409891234},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1497409891234},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1497409891234},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1497409891234},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1497409891235},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497409891235},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1497409892114},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1497409892128},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497409892150},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1497409892150},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1497409892150},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1497409892150},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1497409892150},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1497409892150},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1497409892151},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1497409892151},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1497409892151},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1497409892151},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1497409892151},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1497409892151},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1497409892152},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1497409892152},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1497409892152},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1497409892152},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1497409892152},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1497409892152},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1497409892152},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1497409892152},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1497409892152},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1497409892152},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1497409892152},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1497409892152},{"_id":"public/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1497409892152},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1497409892152},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497409892152},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1497409892152},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1497409892152},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1497409892152},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1497409892152},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1497409892152},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1497409892152},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1497409892152},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1497409892152},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1497409892152},{"_id":"public/css/main.css","hash":"50bb86e3d8e0557f09ad19c57b5eb2db218071a1","modified":1497409892152},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1497409892152},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1497409892153},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1497409892153},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1497409892153},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1497409892153},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1497409892153},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1497409892153},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1497409892153},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1497409892153},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1497409892153},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1497409892153},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1497409892153},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1497409892153},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1497409892153},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1497409892153},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1497409892153},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1497409892153},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1497409892153},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1497409892154},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1497409892154},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1497409892154},{"_id":"public/images/avatar.gif","hash":"2e80c19676ccaa399a79ae31f07fef05aeeb8389","modified":1497409892172},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1497409892172}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-06-03T08:52:18.000Z","tags":["about"],"_content":"## About Me\n安静美男子，标准纯爷们。\n尘世间一迷途小书童。\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-06-03 16:52:18\ntags: [about]\n---\n## About Me\n安静美男子，标准纯爷们。\n尘世间一迷途小书童。\n\n\n","updated":"2017-06-03T12:08:45.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3wf6oyx000k8n3r78lwgx1l","content":"<h2 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h2><p>安静美男子，标准纯爷们。<br>尘世间一迷途小书童。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h2><p>安静美男子，标准纯爷们。<br>尘世间一迷途小书童。</p>\n"},{"title":"tags","date":"2017-06-03T11:50:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-03 19:50:28\ntype: \"tags\"\n---\n","updated":"2017-06-03T11:51:20.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj3wf6oz1000m8n3ritaxkry2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Mybatis 动态传入表名进行sql查询","date":"2017-05-13T08:52:18.000Z","_content":"\n网上也有相关的方法，基本都为\n1. 添加属性statementType=\"STATEMENT\"\n2. 用${}代替#{}。如此一来就会有sql注入的危险。\n\n今天自己尝试了一种新的方法，如下:\n#### 基本思路\n利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。\n#### 实现过程\n* 定义一个mapper\n\n```Java\npublic interface TestMapper{\n    //统计userId的对应的数据总数\n    int countByUserId(@Param(\"tableName\") String tableName, @Param(\"userId\") Integer userId);\n}\n```\n* 定义xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"TestMapper对应路径\">\n    <select id=\"countByUserId\" parameterType=\"hashmap\" resultType=\"java.lang.Integer\">\n        SELECT\n        COUNT(1)\n        FROM\n        ${tableName}\n        WHERE\n        userId = #{userId}\n    </select>\n</mapper>\n\n```\n如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。\n\n\n\n","source":"_posts/Mybatis 动态传入表名进行sql查询.md","raw":"---\ntitle: Mybatis 动态传入表名进行sql查询\ndate: 2017-05-13 16:52:18\ntags: [java, mybatis]\n---\n\n网上也有相关的方法，基本都为\n1. 添加属性statementType=\"STATEMENT\"\n2. 用${}代替#{}。如此一来就会有sql注入的危险。\n\n今天自己尝试了一种新的方法，如下:\n#### 基本思路\n利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。\n#### 实现过程\n* 定义一个mapper\n\n```Java\npublic interface TestMapper{\n    //统计userId的对应的数据总数\n    int countByUserId(@Param(\"tableName\") String tableName, @Param(\"userId\") Integer userId);\n}\n```\n* 定义xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"TestMapper对应路径\">\n    <select id=\"countByUserId\" parameterType=\"hashmap\" resultType=\"java.lang.Integer\">\n        SELECT\n        COUNT(1)\n        FROM\n        ${tableName}\n        WHERE\n        userId = #{userId}\n    </select>\n</mapper>\n\n```\n如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。\n\n\n\n","slug":"Mybatis 动态传入表名进行sql查询","published":1,"updated":"2017-06-03T11:53:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3wf6owu00008n3ritdx6ivk","content":"<p>网上也有相关的方法，基本都为</p>\n<ol>\n<li>添加属性statementType=”STATEMENT”</li>\n<li>用${}代替#{}。如此一来就会有sql注入的危险。</li>\n</ol>\n<p>今天自己尝试了一种新的方法，如下:</p>\n<h4 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h4><p>利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。</p>\n<h4 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h4><ul>\n<li>定义一个mapper</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestMapper</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//统计userId的对应的数据总数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countByUserId</span><span class=\"params\">(@Param(<span class=\"string\">\"tableName\"</span>)</span> String tableName, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"userId\"</span>)</span> Integer userId)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"TestMapper对应路径\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"countByUserId\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"hashmap\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span></div><div class=\"line\">        SELECT</div><div class=\"line\">        COUNT(1)</div><div class=\"line\">        FROM</div><div class=\"line\">        $&#123;tableName&#125;</div><div class=\"line\">        WHERE</div><div class=\"line\">        userId = #&#123;userId&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网上也有相关的方法，基本都为</p>\n<ol>\n<li>添加属性statementType=”STATEMENT”</li>\n<li>用${}代替#{}。如此一来就会有sql注入的危险。</li>\n</ol>\n<p>今天自己尝试了一种新的方法，如下:</p>\n<h4 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h4><p>利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。</p>\n<h4 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h4><ul>\n<li>定义一个mapper</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestMapper</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//统计userId的对应的数据总数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">countByUserId</span><span class=\"params\">(@Param(<span class=\"string\">\"tableName\"</span>)</span> String tableName, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"userId\"</span>)</span> Integer userId)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定义xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"TestMapper对应路径\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"countByUserId\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"hashmap\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span></div><div class=\"line\">        SELECT</div><div class=\"line\">        COUNT(1)</div><div class=\"line\">        FROM</div><div class=\"line\">        $&#123;tableName&#125;</div><div class=\"line\">        WHERE</div><div class=\"line\">        userId = #&#123;userId&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。</p>\n"},{"title":"杭州违章处理吐槽","date":"2016-03-15T08:52:18.000Z","_content":"买车一年半，行驶1万5公里，不算多，平时开得也比较小心，但还是吃了三张罚单，其中在火车东站就被double kill了。这几天去处理了一下，过程曲折，不得不吐槽一下\n\n1. 滨江周日处理点只有一处（鉴于党国国情，已是喜出望外），但不能当场交钱，需要自己去银行或者支付宝支付。\n2. 支付宝支付只能根据违章号一个个处理，重复操作太多。\n3. 在火车东站的两张罚单只能到<big>绍兴路64号（杭州铁路公安局交警支队机动大队）</big>，全杭州只此一家，且只有工作日上班。\n4. 铁路交警只能现场交现金，不支持刷卡和支付宝。或者可自己去<big>环城东路2号 中国工商银行(杭州城站广场支行)</big>，全杭州又只此一家，两者距离4公里\n<br />\n![screenshot.jpg](http://ww4.sinaimg.cn/large/73e6e6e1gw1f1xq3trq5xj20dd0hbaft.jpg)\n<br />\n5. 违章人多处理人少自不必说了，排队半个小是以上是妥妥的。\n\n\n回来查了一下，如果在机场违章就必须要去机场处理！！！！ 所以切记开车一定要遵守教规！！！\n\n","source":"_posts/hangzhouweizhang.md","raw":"---\ntitle: 杭州违章处理吐槽\ndate: 2016-03-15 16:52:18\ntags: [life, hangzhou]\n---\n买车一年半，行驶1万5公里，不算多，平时开得也比较小心，但还是吃了三张罚单，其中在火车东站就被double kill了。这几天去处理了一下，过程曲折，不得不吐槽一下\n\n1. 滨江周日处理点只有一处（鉴于党国国情，已是喜出望外），但不能当场交钱，需要自己去银行或者支付宝支付。\n2. 支付宝支付只能根据违章号一个个处理，重复操作太多。\n3. 在火车东站的两张罚单只能到<big>绍兴路64号（杭州铁路公安局交警支队机动大队）</big>，全杭州只此一家，且只有工作日上班。\n4. 铁路交警只能现场交现金，不支持刷卡和支付宝。或者可自己去<big>环城东路2号 中国工商银行(杭州城站广场支行)</big>，全杭州又只此一家，两者距离4公里\n<br />\n![screenshot.jpg](http://ww4.sinaimg.cn/large/73e6e6e1gw1f1xq3trq5xj20dd0hbaft.jpg)\n<br />\n5. 违章人多处理人少自不必说了，排队半个小是以上是妥妥的。\n\n\n回来查了一下，如果在机场违章就必须要去机场处理！！！！ 所以切记开车一定要遵守教规！！！\n\n","slug":"hangzhouweizhang","published":1,"updated":"2017-06-03T11:52:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3wf6owz00018n3rxs5idixy","content":"<p>买车一年半，行驶1万5公里，不算多，平时开得也比较小心，但还是吃了三张罚单，其中在火车东站就被double kill了。这几天去处理了一下，过程曲折，不得不吐槽一下</p>\n<ol>\n<li>滨江周日处理点只有一处（鉴于党国国情，已是喜出望外），但不能当场交钱，需要自己去银行或者支付宝支付。</li>\n<li>支付宝支付只能根据违章号一个个处理，重复操作太多。</li>\n<li>在火车东站的两张罚单只能到<big>绍兴路64号（杭州铁路公安局交警支队机动大队）</big>，全杭州只此一家，且只有工作日上班。</li>\n<li>铁路交警只能现场交现金，不支持刷卡和支付宝。或者可自己去<big>环城东路2号 中国工商银行(杭州城站广场支行)</big>，全杭州又只此一家，两者距离4公里<br><br><br><img src=\"http://ww4.sinaimg.cn/large/73e6e6e1gw1f1xq3trq5xj20dd0hbaft.jpg\" alt=\"screenshot.jpg\"><br><br></li>\n<li>违章人多处理人少自不必说了，排队半个小是以上是妥妥的。</li>\n</ol>\n<p>回来查了一下，如果在机场违章就必须要去机场处理！！！！ 所以切记开车一定要遵守教规！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>买车一年半，行驶1万5公里，不算多，平时开得也比较小心，但还是吃了三张罚单，其中在火车东站就被double kill了。这几天去处理了一下，过程曲折，不得不吐槽一下</p>\n<ol>\n<li>滨江周日处理点只有一处（鉴于党国国情，已是喜出望外），但不能当场交钱，需要自己去银行或者支付宝支付。</li>\n<li>支付宝支付只能根据违章号一个个处理，重复操作太多。</li>\n<li>在火车东站的两张罚单只能到<big>绍兴路64号（杭州铁路公安局交警支队机动大队）</big>，全杭州只此一家，且只有工作日上班。</li>\n<li>铁路交警只能现场交现金，不支持刷卡和支付宝。或者可自己去<big>环城东路2号 中国工商银行(杭州城站广场支行)</big>，全杭州又只此一家，两者距离4公里<br><br><br><img src=\"http://ww4.sinaimg.cn/large/73e6e6e1gw1f1xq3trq5xj20dd0hbaft.jpg\" alt=\"screenshot.jpg\"><br><br></li>\n<li>违章人多处理人少自不必说了，排队半个小是以上是妥妥的。</li>\n</ol>\n<p>回来查了一下，如果在机场违章就必须要去机场处理！！！！ 所以切记开车一定要遵守教规！！！</p>\n"},{"title":"protobuf 的简单介绍","date":"2016-02-29T08:52:18.000Z","_content":"\n### protobuf 是什么\nprotobuf 全称 Google Protocol Buffers，是Google公司内部的混合语言数据标准。在2008年7月7号将其作为开源项目对外公布。\n\nprotobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。\n\nprotobuf的[源码](https://github.com/google/protobuf)，protobuf的[官方文档](https://developers.google.com/protocol-buffers/docs/overview)， 有兴趣的同学可以深入研究一下\n\n\n### 为什么要使用 protobuf\nprotobuf是一种结构化数据存储格式，类似的比较常见的有xml和json。那么和他们比较，protobuf又有什么优点？\n  \n  * 后台硬，有Google开发且开源，已经在Google内部久经考验 \n  * 可通过解析器生成数据访问类，在编程中更容易使用\n  * 性能好/效率高。鉴于Google对于性能的偏执，protobuf的性能自不必说。但网上相关数据已有很多，我取了这个[例子](http://www.webrube.com/json-protobuf-web_rube/5858)\n  \n    > 100个logs， 序列化5000次所需时间（秒）. 越小越好\n   \n    | Language        | Protobuf           | Json  |\n    | ------------- |:-------------:| -----:|\n    | Python      | 15.13 | 0.88 |\n    | CSharp      | 0.23      |   1.80  |\n    \n    > 100个logs， 反序列化5000次所需时间（秒）. 越小越好\n   \n    | Language        | Protobuf           | Json  |\n    | ------------- |:-------------:| -----:|\n    | Python      |   8.14    |  1.40  |\n    | CSharp      | 0.47    |  4.37  |\n\n### 怎么样使用 protobuf\n目前protobuf的官方教程支持C++，C#，Go，Java以及Python。官方自带的example也比较详细\n#### 查看github上的example\n1. 首先安装protobuf， 有多种方案，我选择从github上下载源码后编译安装\n1. 根据源码中的README.txt 运行./autogen.sh， 随后./configure;  make;  make install (可能会缺少一些依赖，根据提示安装即可)\n1. cd example, 根据需要的cpp java python对应的make即可看到例子。\n\n#### 以cpp为例子\n-  先写一个.proto后缀的文件\n``` java\nmessage Person {\n    string name = 1;\n    int32 id = 2; \n    string email = 3;\n}\n``` \n-  使用protoc 命令生成对应的.h和.cc文件(这里的.cc即.c文件， 如其他的语言也会生成对应的文件，查看github example)\n``` bash\n protoc --cpp_out=$DIR  ${xxxx}.proto\n``` \n- 编写写和读的程序\n序列化写入文件的代码\n``` cpp\n#include <iostream>                                                                                                                                                                                          \n#include <fstream>\n#include <string>\n#include \"person.pb.h\"\nusing namespace std;\n\nvoid PromptForPerson(mytest::Person* person) {\n  cout << \"Enter person ID number: \";\n  int id; \n  cin >> id; \n  person->set_id(id);\n  cin.ignore(256, '\\n');\n\n  cout << \"Enter name: \";\n  getline(cin, *person->mutable_name());\n}\n\nint main(int argc, char* argv[]) {\n  if (argc != 2) {\n    cerr << \"Usage:  \" << argv[0] << \" FILE\" << endl;\n    return -1; \n  }\n\n  mytest::Person person;\n\n  {\n    fstream input(argv[1], ios::in | ios::binary);\n    if (!input) {\n      cout << argv[1] << \": File not found.  Creating a new file.\" << endl;\n    } else if (!person.ParseFromIstream(&input)) {\n      cerr << \"Failed to parse address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  PromptForPerson(&person);\n\n  {\n    fstream output(argv[1], ios::out | ios::trunc | ios::binary);\n    if (!person.SerializeToOstream(&output)) {\n      cerr << \"Failed to write address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  google::protobuf::ShutdownProtobufLibrary();\n\n  return 0;\n}\n```\n反序列化读取文件的代码\n\n``` cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include \"person.pb.h\"\nusing namespace std;\n\nvoid ListPeople(const mytest::Person& person) {\n    cout << \"Person ID: \" << person.id() << endl;\n    cout << \"Name: \" << person.name() << endl;\n}\n\nint main(int argc, char* argv[]) {\n  if (argc != 2) {                                                                                                                                                                                           \n    cerr << \"Usage:  \" << argv[0] << \" ADDRESS_BOOK_FILE\" << endl;\n    return -1; \n  }\n\n  mytest::Person person;\n\n  {\n    fstream input(argv[1], ios::in | ios::binary);\n    if (!person.ParseFromIstream(&input)) {\n      cerr << \"Failed to parse address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  ListPeople(person);\n\n  google::protobuf::ShutdownProtobufLibrary();\n\n  return 0;\n}\n```\n- 编译程序\n``` bash\ng++ add_person.cc person.pb.cc -o add_person -pthread -I/usr/local/include  -pthread -L/usr/local/lib -lprotobuf -lpthread\ng++ list_person.cc person.pb.cc -o list_person -pthread -I/usr/local/include  -pthread -L/usr/local/lib -lprotobuf -lpthread\n``` \n- 运行程序\n``` bash\n./add_person file_name\n./list_person file_name\n```\n- 与json文件比较\n``` bash\nzhu_kewei@PC0247:~/work/test/protobuf/examples/mytest$ ls -l xx*\n-rw-rw-r-- 1 zhu_kewei zhu_kewei  7  3月  4 14:12 xx\n-rw-rw-r-- 1 zhu_kewei zhu_kewei 27  3月  4 14:16 xx.json\n```\n- 可以看到用proto序列化后比json文件小\n\n\n","source":"_posts/protobuf_stu.md","raw":"---\ntitle: protobuf 的简单介绍\ndate: 2016-02-29 16:52:18\ntags: [protobuf]\n---\n\n### protobuf 是什么\nprotobuf 全称 Google Protocol Buffers，是Google公司内部的混合语言数据标准。在2008年7月7号将其作为开源项目对外公布。\n\nprotobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。\n\nprotobuf的[源码](https://github.com/google/protobuf)，protobuf的[官方文档](https://developers.google.com/protocol-buffers/docs/overview)， 有兴趣的同学可以深入研究一下\n\n\n### 为什么要使用 protobuf\nprotobuf是一种结构化数据存储格式，类似的比较常见的有xml和json。那么和他们比较，protobuf又有什么优点？\n  \n  * 后台硬，有Google开发且开源，已经在Google内部久经考验 \n  * 可通过解析器生成数据访问类，在编程中更容易使用\n  * 性能好/效率高。鉴于Google对于性能的偏执，protobuf的性能自不必说。但网上相关数据已有很多，我取了这个[例子](http://www.webrube.com/json-protobuf-web_rube/5858)\n  \n    > 100个logs， 序列化5000次所需时间（秒）. 越小越好\n   \n    | Language        | Protobuf           | Json  |\n    | ------------- |:-------------:| -----:|\n    | Python      | 15.13 | 0.88 |\n    | CSharp      | 0.23      |   1.80  |\n    \n    > 100个logs， 反序列化5000次所需时间（秒）. 越小越好\n   \n    | Language        | Protobuf           | Json  |\n    | ------------- |:-------------:| -----:|\n    | Python      |   8.14    |  1.40  |\n    | CSharp      | 0.47    |  4.37  |\n\n### 怎么样使用 protobuf\n目前protobuf的官方教程支持C++，C#，Go，Java以及Python。官方自带的example也比较详细\n#### 查看github上的example\n1. 首先安装protobuf， 有多种方案，我选择从github上下载源码后编译安装\n1. 根据源码中的README.txt 运行./autogen.sh， 随后./configure;  make;  make install (可能会缺少一些依赖，根据提示安装即可)\n1. cd example, 根据需要的cpp java python对应的make即可看到例子。\n\n#### 以cpp为例子\n-  先写一个.proto后缀的文件\n``` java\nmessage Person {\n    string name = 1;\n    int32 id = 2; \n    string email = 3;\n}\n``` \n-  使用protoc 命令生成对应的.h和.cc文件(这里的.cc即.c文件， 如其他的语言也会生成对应的文件，查看github example)\n``` bash\n protoc --cpp_out=$DIR  ${xxxx}.proto\n``` \n- 编写写和读的程序\n序列化写入文件的代码\n``` cpp\n#include <iostream>                                                                                                                                                                                          \n#include <fstream>\n#include <string>\n#include \"person.pb.h\"\nusing namespace std;\n\nvoid PromptForPerson(mytest::Person* person) {\n  cout << \"Enter person ID number: \";\n  int id; \n  cin >> id; \n  person->set_id(id);\n  cin.ignore(256, '\\n');\n\n  cout << \"Enter name: \";\n  getline(cin, *person->mutable_name());\n}\n\nint main(int argc, char* argv[]) {\n  if (argc != 2) {\n    cerr << \"Usage:  \" << argv[0] << \" FILE\" << endl;\n    return -1; \n  }\n\n  mytest::Person person;\n\n  {\n    fstream input(argv[1], ios::in | ios::binary);\n    if (!input) {\n      cout << argv[1] << \": File not found.  Creating a new file.\" << endl;\n    } else if (!person.ParseFromIstream(&input)) {\n      cerr << \"Failed to parse address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  PromptForPerson(&person);\n\n  {\n    fstream output(argv[1], ios::out | ios::trunc | ios::binary);\n    if (!person.SerializeToOstream(&output)) {\n      cerr << \"Failed to write address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  google::protobuf::ShutdownProtobufLibrary();\n\n  return 0;\n}\n```\n反序列化读取文件的代码\n\n``` cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include \"person.pb.h\"\nusing namespace std;\n\nvoid ListPeople(const mytest::Person& person) {\n    cout << \"Person ID: \" << person.id() << endl;\n    cout << \"Name: \" << person.name() << endl;\n}\n\nint main(int argc, char* argv[]) {\n  if (argc != 2) {                                                                                                                                                                                           \n    cerr << \"Usage:  \" << argv[0] << \" ADDRESS_BOOK_FILE\" << endl;\n    return -1; \n  }\n\n  mytest::Person person;\n\n  {\n    fstream input(argv[1], ios::in | ios::binary);\n    if (!person.ParseFromIstream(&input)) {\n      cerr << \"Failed to parse address book.\" << endl;\n      return -1; \n    }   \n  }\n\n  ListPeople(person);\n\n  google::protobuf::ShutdownProtobufLibrary();\n\n  return 0;\n}\n```\n- 编译程序\n``` bash\ng++ add_person.cc person.pb.cc -o add_person -pthread -I/usr/local/include  -pthread -L/usr/local/lib -lprotobuf -lpthread\ng++ list_person.cc person.pb.cc -o list_person -pthread -I/usr/local/include  -pthread -L/usr/local/lib -lprotobuf -lpthread\n``` \n- 运行程序\n``` bash\n./add_person file_name\n./list_person file_name\n```\n- 与json文件比较\n``` bash\nzhu_kewei@PC0247:~/work/test/protobuf/examples/mytest$ ls -l xx*\n-rw-rw-r-- 1 zhu_kewei zhu_kewei  7  3月  4 14:12 xx\n-rw-rw-r-- 1 zhu_kewei zhu_kewei 27  3月  4 14:16 xx.json\n```\n- 可以看到用proto序列化后比json文件小\n\n\n","slug":"protobuf_stu","published":1,"updated":"2017-06-03T11:54:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3wf6ox800038n3rz5o9le42","content":"<h3 id=\"protobuf-是什么\"><a href=\"#protobuf-是什么\" class=\"headerlink\" title=\"protobuf 是什么\"></a>protobuf 是什么</h3><p>protobuf 全称 Google Protocol Buffers，是Google公司内部的混合语言数据标准。在2008年7月7号将其作为开源项目对外公布。</p>\n<p>protobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>\n<p>protobuf的<a href=\"https://github.com/google/protobuf\" target=\"_blank\" rel=\"external\">源码</a>，protobuf的<a href=\"https://developers.google.com/protocol-buffers/docs/overview\" target=\"_blank\" rel=\"external\">官方文档</a>， 有兴趣的同学可以深入研究一下</p>\n<h3 id=\"为什么要使用-protobuf\"><a href=\"#为什么要使用-protobuf\" class=\"headerlink\" title=\"为什么要使用 protobuf\"></a>为什么要使用 protobuf</h3><p>protobuf是一种结构化数据存储格式，类似的比较常见的有xml和json。那么和他们比较，protobuf又有什么优点？</p>\n<ul>\n<li>后台硬，有Google开发且开源，已经在Google内部久经考验 </li>\n<li>可通过解析器生成数据访问类，在编程中更容易使用</li>\n<li><p>性能好/效率高。鉴于Google对于性能的偏执，protobuf的性能自不必说。但网上相关数据已有很多，我取了这个<a href=\"http://www.webrube.com/json-protobuf-web_rube/5858\" target=\"_blank\" rel=\"external\">例子</a></p>\n<blockquote>\n<p>100个logs， 序列化5000次所需时间（秒）. 越小越好</p>\n</blockquote>\n<p>| Language        | Protobuf           | Json  |<br>| ————- |:————-:| —–:|<br>| Python      | 15.13 | 0.88 |<br>| CSharp      | 0.23      |   1.80  |</p>\n<blockquote>\n<p>100个logs， 反序列化5000次所需时间（秒）. 越小越好</p>\n</blockquote>\n<p>| Language        | Protobuf           | Json  |<br>| ————- |:————-:| —–:|<br>| Python      |   8.14    |  1.40  |<br>| CSharp      | 0.47    |  4.37  |</p>\n</li>\n</ul>\n<h3 id=\"怎么样使用-protobuf\"><a href=\"#怎么样使用-protobuf\" class=\"headerlink\" title=\"怎么样使用 protobuf\"></a>怎么样使用 protobuf</h3><p>目前protobuf的官方教程支持C++，C#，Go，Java以及Python。官方自带的example也比较详细</p>\n<h4 id=\"查看github上的example\"><a href=\"#查看github上的example\" class=\"headerlink\" title=\"查看github上的example\"></a>查看github上的example</h4><ol>\n<li>首先安装protobuf， 有多种方案，我选择从github上下载源码后编译安装</li>\n<li>根据源码中的README.txt 运行./autogen.sh， 随后./configure;  make;  make install (可能会缺少一些依赖，根据提示安装即可)</li>\n<li>cd example, 根据需要的cpp java python对应的make即可看到例子。</li>\n</ol>\n<h4 id=\"以cpp为例子\"><a href=\"#以cpp为例子\" class=\"headerlink\" title=\"以cpp为例子\"></a>以cpp为例子</h4><ul>\n<li>先写一个.proto后缀的文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">message Person &#123;</div><div class=\"line\">    string name = 1;</div><div class=\"line\">    int32 id = 2; </div><div class=\"line\">    string email = 3;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\">-  使用protoc 命令生成对应的.h和.cc文件(这里的.cc即.c文件， 如其他的语言也会生成对应的文件，查看github example)</div><div class=\"line\">``` bash</div><div class=\"line\"> protoc --cpp_out=$DIR  $&#123;xxxx&#125;.proto</div><div class=\"line\">``` </div><div class=\"line\">- 编写写和读的程序</div><div class=\"line\">序列化写入文件的代码</div><div class=\"line\">``` cpp</div><div class=\"line\">#include &lt;iostream&gt;                                                                                                                                                                                          </div><div class=\"line\">#include &lt;fstream&gt;</div><div class=\"line\">#include &lt;string&gt;</div><div class=\"line\">#include \"person.pb.h\"</div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">void PromptForPerson(mytest::Person* person) &#123;</div><div class=\"line\">  cout &lt;&lt; \"Enter person ID number: \";</div><div class=\"line\">  int id; </div><div class=\"line\">  cin &gt;&gt; id; </div><div class=\"line\">  person-&gt;set_id(id);</div><div class=\"line\">  cin.ignore(256, '\\n');</div><div class=\"line\"></div><div class=\"line\">  cout &lt;&lt; \"Enter name: \";</div><div class=\"line\">  getline(cin, *person-&gt;mutable_name());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char* argv[]) &#123;</div><div class=\"line\">  if (argc != 2) &#123;</div><div class=\"line\">    cerr &lt;&lt; \"Usage:  \" &lt;&lt; argv[0] &lt;&lt; \" FILE\" &lt;&lt; endl;</div><div class=\"line\">    return -1; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  mytest::Person person;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    fstream input(argv[1], ios::in | ios::binary);</div><div class=\"line\">    if (!input) &#123;</div><div class=\"line\">      cout &lt;&lt; argv[1] &lt;&lt; \": File not found.  Creating a new file.\" &lt;&lt; endl;</div><div class=\"line\">    &#125; else if (!person.ParseFromIstream(&amp;input)) &#123;</div><div class=\"line\">      cerr &lt;&lt; \"Failed to parse address book.\" &lt;&lt; endl;</div><div class=\"line\">      return -1; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  PromptForPerson(&amp;person);</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    fstream output(argv[1], ios::out | ios::trunc | ios::binary);</div><div class=\"line\">    if (!person.SerializeToOstream(&amp;output)) &#123;</div><div class=\"line\">      cerr &lt;&lt; \"Failed to write address book.\" &lt;&lt; endl;</div><div class=\"line\">      return -1; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  google::protobuf::ShutdownProtobufLibrary();</div><div class=\"line\"></div><div class=\"line\">  return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>反序列化读取文件的代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"person.pb.h\"</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ListPeople</span><span class=\"params\">(<span class=\"keyword\">const</span> mytest::Person&amp; person)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person ID: \"</span> &lt;&lt; person.id() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Name: \"</span> &lt;&lt; person.name() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;                                                                                                                                                                                           </div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Usage:  \"</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\" ADDRESS_BOOK_FILE\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  mytest::Person person;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"function\">fstream <span class=\"title\">input</span><span class=\"params\">(argv[<span class=\"number\">1</span>], ios::in | ios::binary)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!person.ParseFromIstream(&amp;input)) &#123;</div><div class=\"line\">      <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Failed to parse address book.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ListPeople(person);</div><div class=\"line\"></div><div class=\"line\">  google::protobuf::ShutdownProtobufLibrary();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>编译程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">g++ add_person.cc person.pb.cc -o add_person -pthread -I/usr/<span class=\"built_in\">local</span>/include  -pthread -L/usr/<span class=\"built_in\">local</span>/lib -lprotobuf -lpthread</div><div class=\"line\">g++ list_person.cc person.pb.cc -o list_person -pthread -I/usr/<span class=\"built_in\">local</span>/include  -pthread -L/usr/<span class=\"built_in\">local</span>/lib -lprotobuf -lpthread</div><div class=\"line\">``` </div><div class=\"line\">- 运行程序</div><div class=\"line\">``` bash</div><div class=\"line\">./add_person file_name</div><div class=\"line\">./list_person file_name</div></pre></td></tr></table></figure>\n</li>\n<li><p>与json文件比较</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">zhu_kewei@PC0247:~/work/<span class=\"built_in\">test</span>/protobuf/examples/mytest$ ls -l xx*</div><div class=\"line\">-rw-rw-r-- 1 zhu_kewei zhu_kewei  7  3月  4 14:12 xx</div><div class=\"line\">-rw-rw-r-- 1 zhu_kewei zhu_kewei 27  3月  4 14:16 xx.json</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以看到用proto序列化后比json文件小</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"protobuf-是什么\"><a href=\"#protobuf-是什么\" class=\"headerlink\" title=\"protobuf 是什么\"></a>protobuf 是什么</h3><p>protobuf 全称 Google Protocol Buffers，是Google公司内部的混合语言数据标准。在2008年7月7号将其作为开源项目对外公布。</p>\n<p>protobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>\n<p>protobuf的<a href=\"https://github.com/google/protobuf\" target=\"_blank\" rel=\"external\">源码</a>，protobuf的<a href=\"https://developers.google.com/protocol-buffers/docs/overview\" target=\"_blank\" rel=\"external\">官方文档</a>， 有兴趣的同学可以深入研究一下</p>\n<h3 id=\"为什么要使用-protobuf\"><a href=\"#为什么要使用-protobuf\" class=\"headerlink\" title=\"为什么要使用 protobuf\"></a>为什么要使用 protobuf</h3><p>protobuf是一种结构化数据存储格式，类似的比较常见的有xml和json。那么和他们比较，protobuf又有什么优点？</p>\n<ul>\n<li>后台硬，有Google开发且开源，已经在Google内部久经考验 </li>\n<li>可通过解析器生成数据访问类，在编程中更容易使用</li>\n<li><p>性能好/效率高。鉴于Google对于性能的偏执，protobuf的性能自不必说。但网上相关数据已有很多，我取了这个<a href=\"http://www.webrube.com/json-protobuf-web_rube/5858\" target=\"_blank\" rel=\"external\">例子</a></p>\n<blockquote>\n<p>100个logs， 序列化5000次所需时间（秒）. 越小越好</p>\n</blockquote>\n<p>| Language        | Protobuf           | Json  |<br>| ————- |:————-:| —–:|<br>| Python      | 15.13 | 0.88 |<br>| CSharp      | 0.23      |   1.80  |</p>\n<blockquote>\n<p>100个logs， 反序列化5000次所需时间（秒）. 越小越好</p>\n</blockquote>\n<p>| Language        | Protobuf           | Json  |<br>| ————- |:————-:| —–:|<br>| Python      |   8.14    |  1.40  |<br>| CSharp      | 0.47    |  4.37  |</p>\n</li>\n</ul>\n<h3 id=\"怎么样使用-protobuf\"><a href=\"#怎么样使用-protobuf\" class=\"headerlink\" title=\"怎么样使用 protobuf\"></a>怎么样使用 protobuf</h3><p>目前protobuf的官方教程支持C++，C#，Go，Java以及Python。官方自带的example也比较详细</p>\n<h4 id=\"查看github上的example\"><a href=\"#查看github上的example\" class=\"headerlink\" title=\"查看github上的example\"></a>查看github上的example</h4><ol>\n<li>首先安装protobuf， 有多种方案，我选择从github上下载源码后编译安装</li>\n<li>根据源码中的README.txt 运行./autogen.sh， 随后./configure;  make;  make install (可能会缺少一些依赖，根据提示安装即可)</li>\n<li>cd example, 根据需要的cpp java python对应的make即可看到例子。</li>\n</ol>\n<h4 id=\"以cpp为例子\"><a href=\"#以cpp为例子\" class=\"headerlink\" title=\"以cpp为例子\"></a>以cpp为例子</h4><ul>\n<li>先写一个.proto后缀的文件<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">message Person &#123;</div><div class=\"line\">    string name = 1;</div><div class=\"line\">    int32 id = 2; </div><div class=\"line\">    string email = 3;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\">-  使用protoc 命令生成对应的.h和.cc文件(这里的.cc即.c文件， 如其他的语言也会生成对应的文件，查看github example)</div><div class=\"line\">``` bash</div><div class=\"line\"> protoc --cpp_out=$DIR  $&#123;xxxx&#125;.proto</div><div class=\"line\">``` </div><div class=\"line\">- 编写写和读的程序</div><div class=\"line\">序列化写入文件的代码</div><div class=\"line\">``` cpp</div><div class=\"line\">#include &lt;iostream&gt;                                                                                                                                                                                          </div><div class=\"line\">#include &lt;fstream&gt;</div><div class=\"line\">#include &lt;string&gt;</div><div class=\"line\">#include \"person.pb.h\"</div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">void PromptForPerson(mytest::Person* person) &#123;</div><div class=\"line\">  cout &lt;&lt; \"Enter person ID number: \";</div><div class=\"line\">  int id; </div><div class=\"line\">  cin &gt;&gt; id; </div><div class=\"line\">  person-&gt;set_id(id);</div><div class=\"line\">  cin.ignore(256, '\\n');</div><div class=\"line\"></div><div class=\"line\">  cout &lt;&lt; \"Enter name: \";</div><div class=\"line\">  getline(cin, *person-&gt;mutable_name());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char* argv[]) &#123;</div><div class=\"line\">  if (argc != 2) &#123;</div><div class=\"line\">    cerr &lt;&lt; \"Usage:  \" &lt;&lt; argv[0] &lt;&lt; \" FILE\" &lt;&lt; endl;</div><div class=\"line\">    return -1; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  mytest::Person person;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    fstream input(argv[1], ios::in | ios::binary);</div><div class=\"line\">    if (!input) &#123;</div><div class=\"line\">      cout &lt;&lt; argv[1] &lt;&lt; \": File not found.  Creating a new file.\" &lt;&lt; endl;</div><div class=\"line\">    &#125; else if (!person.ParseFromIstream(&amp;input)) &#123;</div><div class=\"line\">      cerr &lt;&lt; \"Failed to parse address book.\" &lt;&lt; endl;</div><div class=\"line\">      return -1; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  PromptForPerson(&amp;person);</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    fstream output(argv[1], ios::out | ios::trunc | ios::binary);</div><div class=\"line\">    if (!person.SerializeToOstream(&amp;output)) &#123;</div><div class=\"line\">      cerr &lt;&lt; \"Failed to write address book.\" &lt;&lt; endl;</div><div class=\"line\">      return -1; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  google::protobuf::ShutdownProtobufLibrary();</div><div class=\"line\"></div><div class=\"line\">  return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>反序列化读取文件的代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"person.pb.h\"</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ListPeople</span><span class=\"params\">(<span class=\"keyword\">const</span> mytest::Person&amp; person)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person ID: \"</span> &lt;&lt; person.id() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Name: \"</span> &lt;&lt; person.name() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;                                                                                                                                                                                           </div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Usage:  \"</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\" ADDRESS_BOOK_FILE\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  mytest::Person person;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"function\">fstream <span class=\"title\">input</span><span class=\"params\">(argv[<span class=\"number\">1</span>], ios::in | ios::binary)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!person.ParseFromIstream(&amp;input)) &#123;</div><div class=\"line\">      <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Failed to parse address book.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ListPeople(person);</div><div class=\"line\"></div><div class=\"line\">  google::protobuf::ShutdownProtobufLibrary();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>编译程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">g++ add_person.cc person.pb.cc -o add_person -pthread -I/usr/<span class=\"built_in\">local</span>/include  -pthread -L/usr/<span class=\"built_in\">local</span>/lib -lprotobuf -lpthread</div><div class=\"line\">g++ list_person.cc person.pb.cc -o list_person -pthread -I/usr/<span class=\"built_in\">local</span>/include  -pthread -L/usr/<span class=\"built_in\">local</span>/lib -lprotobuf -lpthread</div><div class=\"line\">``` </div><div class=\"line\">- 运行程序</div><div class=\"line\">``` bash</div><div class=\"line\">./add_person file_name</div><div class=\"line\">./list_person file_name</div></pre></td></tr></table></figure>\n</li>\n<li><p>与json文件比较</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">zhu_kewei@PC0247:~/work/<span class=\"built_in\">test</span>/protobuf/examples/mytest$ ls -l xx*</div><div class=\"line\">-rw-rw-r-- 1 zhu_kewei zhu_kewei  7  3月  4 14:12 xx</div><div class=\"line\">-rw-rw-r-- 1 zhu_kewei zhu_kewei 27  3月  4 14:16 xx.json</div></pre></td></tr></table></figure>\n</li>\n<li><p>可以看到用proto序列化后比json文件小</p>\n</li>\n</ul>\n"},{"title":"使用pelican和github搭建个人blog","date":"2016-04-13T08:52:18.000Z","_content":"\n前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念\n### 1.搭建环境准备\n本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似\n### 2.涉及相关技术\n- Python2.7 及其相关\n- Pelican\n- Github\n- Markdown\n- And so on ...\n#### 2.1. Pelican\n- Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。\n- Pelican的github地址:  https://github.com/getpelican/pelican\n- Pelican 主题的github地址:  https://github.com/getpelican/pelican-themes\n\n### 3. 使用Pelican 搭建个人静态博客\n#### 3.1. 安装pelican\n``` bash\naptitude install python-pelican\n```\npython2.7 以及相关其他依赖不做介绍\n#### 3.2. 开始搭建\n输入如下命令\n``` bash\nmkdir blog\ncd blog\npelican-quickstart\n```\npelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置\n\n结束后生成目录如下\n```bash\n blog/\n ├── content              # 存放输入的Markdown文件夹\n ├── output               # 生成的输出文件\n ├── develop_server.sh    # 开启测试服务器脚本\n ├── Makefile             # 管理博客的Makefile\n ├── pelicanconf.py       # 主配置文件\n └── publishconf.py       # 主发布文件\n```\n\n####3.3. 写博客内容\n - 进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可\n - Markdown 在线编辑器推荐使用[马克飞象](https://maxiang.io/)，个人使用不错。本地编辑器使用ReText。\n - 切记在每个文件前四行输入如下\n```bash\n Title: 文章标题\n Date: 2013-04-18\n Category: 文章类别\n Tag: 标签1, 标签2\n```\n####3.4. 预览博客\n输入以下命令\n``` bash\nmake publish\nmake serve\n```\n打开浏览器，输入127.0.0.1:8000 即可看到博客\n\n####3.5. 选择主题\n[pelican-themes](https://github.com/getpelican/pelican-themes) 上有很多主题， git clone后可以使用如下命令安装任一主题\n```bash\npelican-themes -i XXXXXX\n```\n安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =\"pelican-bootstrap3\"，重启即可看到主题修改\n\n####3.6. 设置favicon.ico\nfavicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  \n\n 1.  选择图片，生成.ico文件(可直接使用网站生成如 [在线制作ico图标](http://www.bitbug.net/))\n 2.  将图片命名成favicon.ico，放置到与Makefile同级目录\n 3.  修改Makefile，添加移动favicon.ico功能\n```bash\nFAVICONICO=$(BASEDIR)/favicon.ico\n\npublish: clean                                                                                                                                                                                           \n    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)\n    cp $(FAVICONICO) $(OUTPUTDIR)\n```\n\n####3.7. 设置评论系统\n在[Disqus](https://disqus.com/admin/signup)上申请一个站点，记牢Shortname。 在pelicanconf.py添加\n```bash\nDISQUS_SITENAME = Shortname\n```\n设置后可以在每个blog下出现如此评论系统\n![disqus_comments](http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg)\n\n####3.8. 添加图片图床\n前两天一直在找一个简单易用的图床，终于找到一个推荐的[围脖是个好图床](https://weibotuchuang.sinaapp.com/)\n\n1. 进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)\n2. 安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了\n\n####3.X. 其他功能\n其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新\n\n### 4. 使用github发布博客\n原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。\n\n1. 登陆Github，创建一个名为username.github.io的版本库(必须如此格式)\n2. 将blog/output 下的内容git到username.github.io下\n3. 少等片刻，登陆http://username.github.io，会发现自己的个人博客已经生成\n\n如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了...\n\n\n","source":"_posts/pelican_blog.md","raw":"---\ntitle: 使用pelican和github搭建个人blog\ndate: 2016-04-13 16:52:18\ntags: [blog, pelican, python]\n---\n\n前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念\n### 1.搭建环境准备\n本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似\n### 2.涉及相关技术\n- Python2.7 及其相关\n- Pelican\n- Github\n- Markdown\n- And so on ...\n#### 2.1. Pelican\n- Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。\n- Pelican的github地址:  https://github.com/getpelican/pelican\n- Pelican 主题的github地址:  https://github.com/getpelican/pelican-themes\n\n### 3. 使用Pelican 搭建个人静态博客\n#### 3.1. 安装pelican\n``` bash\naptitude install python-pelican\n```\npython2.7 以及相关其他依赖不做介绍\n#### 3.2. 开始搭建\n输入如下命令\n``` bash\nmkdir blog\ncd blog\npelican-quickstart\n```\npelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置\n\n结束后生成目录如下\n```bash\n blog/\n ├── content              # 存放输入的Markdown文件夹\n ├── output               # 生成的输出文件\n ├── develop_server.sh    # 开启测试服务器脚本\n ├── Makefile             # 管理博客的Makefile\n ├── pelicanconf.py       # 主配置文件\n └── publishconf.py       # 主发布文件\n```\n\n####3.3. 写博客内容\n - 进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可\n - Markdown 在线编辑器推荐使用[马克飞象](https://maxiang.io/)，个人使用不错。本地编辑器使用ReText。\n - 切记在每个文件前四行输入如下\n```bash\n Title: 文章标题\n Date: 2013-04-18\n Category: 文章类别\n Tag: 标签1, 标签2\n```\n####3.4. 预览博客\n输入以下命令\n``` bash\nmake publish\nmake serve\n```\n打开浏览器，输入127.0.0.1:8000 即可看到博客\n\n####3.5. 选择主题\n[pelican-themes](https://github.com/getpelican/pelican-themes) 上有很多主题， git clone后可以使用如下命令安装任一主题\n```bash\npelican-themes -i XXXXXX\n```\n安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =\"pelican-bootstrap3\"，重启即可看到主题修改\n\n####3.6. 设置favicon.ico\nfavicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  \n\n 1.  选择图片，生成.ico文件(可直接使用网站生成如 [在线制作ico图标](http://www.bitbug.net/))\n 2.  将图片命名成favicon.ico，放置到与Makefile同级目录\n 3.  修改Makefile，添加移动favicon.ico功能\n```bash\nFAVICONICO=$(BASEDIR)/favicon.ico\n\npublish: clean                                                                                                                                                                                           \n    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)\n    cp $(FAVICONICO) $(OUTPUTDIR)\n```\n\n####3.7. 设置评论系统\n在[Disqus](https://disqus.com/admin/signup)上申请一个站点，记牢Shortname。 在pelicanconf.py添加\n```bash\nDISQUS_SITENAME = Shortname\n```\n设置后可以在每个blog下出现如此评论系统\n![disqus_comments](http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg)\n\n####3.8. 添加图片图床\n前两天一直在找一个简单易用的图床，终于找到一个推荐的[围脖是个好图床](https://weibotuchuang.sinaapp.com/)\n\n1. 进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)\n2. 安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了\n\n####3.X. 其他功能\n其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新\n\n### 4. 使用github发布博客\n原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。\n\n1. 登陆Github，创建一个名为username.github.io的版本库(必须如此格式)\n2. 将blog/output 下的内容git到username.github.io下\n3. 少等片刻，登陆http://username.github.io，会发现自己的个人博客已经生成\n\n如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了...\n\n\n","slug":"pelican_blog","published":1,"updated":"2017-06-03T11:54:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3wf6ox900048n3rmkca3469","content":"<p>前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念</p>\n<h3 id=\"1-搭建环境准备\"><a href=\"#1-搭建环境准备\" class=\"headerlink\" title=\"1.搭建环境准备\"></a>1.搭建环境准备</h3><p>本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似</p>\n<h3 id=\"2-涉及相关技术\"><a href=\"#2-涉及相关技术\" class=\"headerlink\" title=\"2.涉及相关技术\"></a>2.涉及相关技术</h3><ul>\n<li>Python2.7 及其相关</li>\n<li>Pelican</li>\n<li>Github</li>\n<li>Markdown</li>\n<li>And so on …<h4 id=\"2-1-Pelican\"><a href=\"#2-1-Pelican\" class=\"headerlink\" title=\"2.1. Pelican\"></a>2.1. Pelican</h4></li>\n<li>Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。</li>\n<li>Pelican的github地址:  <a href=\"https://github.com/getpelican/pelican\" target=\"_blank\" rel=\"external\">https://github.com/getpelican/pelican</a></li>\n<li>Pelican 主题的github地址:  <a href=\"https://github.com/getpelican/pelican-themes\" target=\"_blank\" rel=\"external\">https://github.com/getpelican/pelican-themes</a></li>\n</ul>\n<h3 id=\"3-使用Pelican-搭建个人静态博客\"><a href=\"#3-使用Pelican-搭建个人静态博客\" class=\"headerlink\" title=\"3. 使用Pelican 搭建个人静态博客\"></a>3. 使用Pelican 搭建个人静态博客</h3><h4 id=\"3-1-安装pelican\"><a href=\"#3-1-安装pelican\" class=\"headerlink\" title=\"3.1. 安装pelican\"></a>3.1. 安装pelican</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install python-pelican</div></pre></td></tr></table></figure>\n<p>python2.7 以及相关其他依赖不做介绍</p>\n<h4 id=\"3-2-开始搭建\"><a href=\"#3-2-开始搭建\" class=\"headerlink\" title=\"3.2. 开始搭建\"></a>3.2. 开始搭建</h4><p>输入如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir blog</div><div class=\"line\"><span class=\"built_in\">cd</span> blog</div><div class=\"line\">pelican-quickstart</div></pre></td></tr></table></figure></p>\n<p>pelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置</p>\n<p>结束后生成目录如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog/</div><div class=\"line\">├── content              <span class=\"comment\"># 存放输入的Markdown文件夹</span></div><div class=\"line\">├── output               <span class=\"comment\"># 生成的输出文件</span></div><div class=\"line\">├── develop_server.sh    <span class=\"comment\"># 开启测试服务器脚本</span></div><div class=\"line\">├── Makefile             <span class=\"comment\"># 管理博客的Makefile</span></div><div class=\"line\">├── pelicanconf.py       <span class=\"comment\"># 主配置文件</span></div><div class=\"line\">└── publishconf.py       <span class=\"comment\"># 主发布文件</span></div></pre></td></tr></table></figure></p>\n<p>####3.3. 写博客内容</p>\n<ul>\n<li>进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可</li>\n<li>Markdown 在线编辑器推荐使用<a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"external\">马克飞象</a>，个人使用不错。本地编辑器使用ReText。</li>\n<li>切记在每个文件前四行输入如下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Title: 文章标题</div><div class=\"line\">Date: 2013-04-18</div><div class=\"line\">Category: 文章类别</div><div class=\"line\">Tag: 标签1, 标签2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####3.4. 预览博客<br>输入以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make publish</div><div class=\"line\">make serve</div></pre></td></tr></table></figure></p>\n<p>打开浏览器，输入127.0.0.1:8000 即可看到博客</p>\n<p>####3.5. 选择主题<br><a href=\"https://github.com/getpelican/pelican-themes\" target=\"_blank\" rel=\"external\">pelican-themes</a> 上有很多主题， git clone后可以使用如下命令安装任一主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pelican-themes -i XXXXXX</div></pre></td></tr></table></figure></p>\n<p>安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =”pelican-bootstrap3”，重启即可看到主题修改</p>\n<p>####3.6. 设置favicon.ico<br>favicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  </p>\n<ol>\n<li>选择图片，生成.ico文件(可直接使用网站生成如 <a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">在线制作ico图标</a>)</li>\n<li>将图片命名成favicon.ico，放置到与Makefile同级目录</li>\n<li>修改Makefile，添加移动favicon.ico功能<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FAVICONICO=$(BASEDIR)/favicon.ico</div><div class=\"line\"></div><div class=\"line\">publish: clean                                                                                                                                                                                           </div><div class=\"line\">    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)</div><div class=\"line\">    cp $(FAVICONICO) $(OUTPUTDIR)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>####3.7. 设置评论系统<br>在<a href=\"https://disqus.com/admin/signup\" target=\"_blank\" rel=\"external\">Disqus</a>上申请一个站点，记牢Shortname。 在pelicanconf.py添加<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DISQUS_SITENAME = Shortname</div></pre></td></tr></table></figure></p>\n<p>设置后可以在每个blog下出现如此评论系统<br><img src=\"http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg\" alt=\"disqus_comments\"></p>\n<p>####3.8. 添加图片图床<br>前两天一直在找一个简单易用的图床，终于找到一个推荐的<a href=\"https://weibotuchuang.sinaapp.com/\" target=\"_blank\" rel=\"external\">围脖是个好图床</a></p>\n<ol>\n<li>进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)</li>\n<li>安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了</li>\n</ol>\n<p>####3.X. 其他功能<br>其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新</p>\n<h3 id=\"4-使用github发布博客\"><a href=\"#4-使用github发布博客\" class=\"headerlink\" title=\"4. 使用github发布博客\"></a>4. 使用github发布博客</h3><p>原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。</p>\n<ol>\n<li>登陆Github，创建一个名为username.github.io的版本库(必须如此格式)</li>\n<li>将blog/output 下的内容git到username.github.io下</li>\n<li>少等片刻，登陆<a href=\"http://username.github.io，会发现自己的个人博客已经生成\" target=\"_blank\" rel=\"external\">http://username.github.io，会发现自己的个人博客已经生成</a></li>\n</ol>\n<p>如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念</p>\n<h3 id=\"1-搭建环境准备\"><a href=\"#1-搭建环境准备\" class=\"headerlink\" title=\"1.搭建环境准备\"></a>1.搭建环境准备</h3><p>本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似</p>\n<h3 id=\"2-涉及相关技术\"><a href=\"#2-涉及相关技术\" class=\"headerlink\" title=\"2.涉及相关技术\"></a>2.涉及相关技术</h3><ul>\n<li>Python2.7 及其相关</li>\n<li>Pelican</li>\n<li>Github</li>\n<li>Markdown</li>\n<li>And so on …<h4 id=\"2-1-Pelican\"><a href=\"#2-1-Pelican\" class=\"headerlink\" title=\"2.1. Pelican\"></a>2.1. Pelican</h4></li>\n<li>Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。</li>\n<li>Pelican的github地址:  <a href=\"https://github.com/getpelican/pelican\" target=\"_blank\" rel=\"external\">https://github.com/getpelican/pelican</a></li>\n<li>Pelican 主题的github地址:  <a href=\"https://github.com/getpelican/pelican-themes\" target=\"_blank\" rel=\"external\">https://github.com/getpelican/pelican-themes</a></li>\n</ul>\n<h3 id=\"3-使用Pelican-搭建个人静态博客\"><a href=\"#3-使用Pelican-搭建个人静态博客\" class=\"headerlink\" title=\"3. 使用Pelican 搭建个人静态博客\"></a>3. 使用Pelican 搭建个人静态博客</h3><h4 id=\"3-1-安装pelican\"><a href=\"#3-1-安装pelican\" class=\"headerlink\" title=\"3.1. 安装pelican\"></a>3.1. 安装pelican</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude install python-pelican</div></pre></td></tr></table></figure>\n<p>python2.7 以及相关其他依赖不做介绍</p>\n<h4 id=\"3-2-开始搭建\"><a href=\"#3-2-开始搭建\" class=\"headerlink\" title=\"3.2. 开始搭建\"></a>3.2. 开始搭建</h4><p>输入如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir blog</div><div class=\"line\"><span class=\"built_in\">cd</span> blog</div><div class=\"line\">pelican-quickstart</div></pre></td></tr></table></figure></p>\n<p>pelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置</p>\n<p>结束后生成目录如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog/</div><div class=\"line\">├── content              <span class=\"comment\"># 存放输入的Markdown文件夹</span></div><div class=\"line\">├── output               <span class=\"comment\"># 生成的输出文件</span></div><div class=\"line\">├── develop_server.sh    <span class=\"comment\"># 开启测试服务器脚本</span></div><div class=\"line\">├── Makefile             <span class=\"comment\"># 管理博客的Makefile</span></div><div class=\"line\">├── pelicanconf.py       <span class=\"comment\"># 主配置文件</span></div><div class=\"line\">└── publishconf.py       <span class=\"comment\"># 主发布文件</span></div></pre></td></tr></table></figure></p>\n<p>####3.3. 写博客内容</p>\n<ul>\n<li>进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可</li>\n<li>Markdown 在线编辑器推荐使用<a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"external\">马克飞象</a>，个人使用不错。本地编辑器使用ReText。</li>\n<li>切记在每个文件前四行输入如下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Title: 文章标题</div><div class=\"line\">Date: 2013-04-18</div><div class=\"line\">Category: 文章类别</div><div class=\"line\">Tag: 标签1, 标签2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####3.4. 预览博客<br>输入以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make publish</div><div class=\"line\">make serve</div></pre></td></tr></table></figure></p>\n<p>打开浏览器，输入127.0.0.1:8000 即可看到博客</p>\n<p>####3.5. 选择主题<br><a href=\"https://github.com/getpelican/pelican-themes\" target=\"_blank\" rel=\"external\">pelican-themes</a> 上有很多主题， git clone后可以使用如下命令安装任一主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pelican-themes -i XXXXXX</div></pre></td></tr></table></figure></p>\n<p>安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =”pelican-bootstrap3”，重启即可看到主题修改</p>\n<p>####3.6. 设置favicon.ico<br>favicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  </p>\n<ol>\n<li>选择图片，生成.ico文件(可直接使用网站生成如 <a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">在线制作ico图标</a>)</li>\n<li>将图片命名成favicon.ico，放置到与Makefile同级目录</li>\n<li>修改Makefile，添加移动favicon.ico功能<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FAVICONICO=$(BASEDIR)/favicon.ico</div><div class=\"line\"></div><div class=\"line\">publish: clean                                                                                                                                                                                           </div><div class=\"line\">    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)</div><div class=\"line\">    cp $(FAVICONICO) $(OUTPUTDIR)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>####3.7. 设置评论系统<br>在<a href=\"https://disqus.com/admin/signup\" target=\"_blank\" rel=\"external\">Disqus</a>上申请一个站点，记牢Shortname。 在pelicanconf.py添加<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DISQUS_SITENAME = Shortname</div></pre></td></tr></table></figure></p>\n<p>设置后可以在每个blog下出现如此评论系统<br><img src=\"http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg\" alt=\"disqus_comments\"></p>\n<p>####3.8. 添加图片图床<br>前两天一直在找一个简单易用的图床，终于找到一个推荐的<a href=\"https://weibotuchuang.sinaapp.com/\" target=\"_blank\" rel=\"external\">围脖是个好图床</a></p>\n<ol>\n<li>进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)</li>\n<li>安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了</li>\n</ol>\n<p>####3.X. 其他功能<br>其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新</p>\n<h3 id=\"4-使用github发布博客\"><a href=\"#4-使用github发布博客\" class=\"headerlink\" title=\"4. 使用github发布博客\"></a>4. 使用github发布博客</h3><p>原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。</p>\n<ol>\n<li>登陆Github，创建一个名为username.github.io的版本库(必须如此格式)</li>\n<li>将blog/output 下的内容git到username.github.io下</li>\n<li>少等片刻，登陆<a href=\"http://username.github.io，会发现自己的个人博客已经生成\" target=\"_blank\" rel=\"external\">http://username.github.io，会发现自己的个人博客已经生成</a></li>\n</ol>\n<p>如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了…</p>\n"},{"title":"如何用C写python库","date":"2017-06-03T08:52:18.000Z","_content":"\t\n还是比较简单的，这次就权当入个门吧\n1.  写好一个C函数\n```cpp\n#include<stdio.h>\n#include<python2.7/Python.h> //默认python版本就是#include<Python.h>\n\nstatic PyObject *hellozkw(PyObject *self, PyObject *args) {\n    int num;\n    //解析参数\n    if (!PyArg_ParseTuple(args, \"i\", &num)) {\n        return Py_BuildValue(\"i\", -1);\n    }   \n\n    printf(\"hello zkw %d\\n\", num);                                                                                                                                                   \n    return Py_BuildValue(\"i\", NULL);\n}\n\nstatic PyMethodDef HMethods[] = { \n    //方法名，导出函数，参数传递方式，方法描述。\n    {\"hellozkw\", hellozkw, METH_VARARGS, \"hahahaha.... from zkw's hello\"},\n    {NULL, NULL, 0, NULL}\n};\n\nvoid inithello(void) {\n    (void) Py_InitModule(\"hello\", HMethods);\n}\n\n```\n\n2.  准备一个setup文件\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nfrom distutils.core import setup, Extension\n\nmodule = Extension('hello', sources = ['hello.c'])\n                                                                                                                                                                                     \nsetup(name = 'hello test', version = '1.0', ext_modules = [module])\n```\n3. Makefile文件\n```makefile\npublish:\n    python setup.py build\n    python setup.py install                                                                                                                                                          \n\n```\n4. 运行make publush\n5. 运行即可\n```python\n>>> import hello\n>>> ret = hello.hellozkw(123)\nhello zkw 123\n>>> ret\n0\n```\n\n","source":"_posts/如何用C写python库.md","raw":"---\ntitle: 如何用C写python库\ndate: 2017-06-03 16:52:18\ntags: [python]\n---\n\t\n还是比较简单的，这次就权当入个门吧\n1.  写好一个C函数\n```cpp\n#include<stdio.h>\n#include<python2.7/Python.h> //默认python版本就是#include<Python.h>\n\nstatic PyObject *hellozkw(PyObject *self, PyObject *args) {\n    int num;\n    //解析参数\n    if (!PyArg_ParseTuple(args, \"i\", &num)) {\n        return Py_BuildValue(\"i\", -1);\n    }   \n\n    printf(\"hello zkw %d\\n\", num);                                                                                                                                                   \n    return Py_BuildValue(\"i\", NULL);\n}\n\nstatic PyMethodDef HMethods[] = { \n    //方法名，导出函数，参数传递方式，方法描述。\n    {\"hellozkw\", hellozkw, METH_VARARGS, \"hahahaha.... from zkw's hello\"},\n    {NULL, NULL, 0, NULL}\n};\n\nvoid inithello(void) {\n    (void) Py_InitModule(\"hello\", HMethods);\n}\n\n```\n\n2.  准备一个setup文件\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nfrom distutils.core import setup, Extension\n\nmodule = Extension('hello', sources = ['hello.c'])\n                                                                                                                                                                                     \nsetup(name = 'hello test', version = '1.0', ext_modules = [module])\n```\n3. Makefile文件\n```makefile\npublish:\n    python setup.py build\n    python setup.py install                                                                                                                                                          \n\n```\n4. 运行make publush\n5. 运行即可\n```python\n>>> import hello\n>>> ret = hello.hellozkw(123)\nhello zkw 123\n>>> ret\n0\n```\n\n","slug":"如何用C写python库","published":1,"updated":"2017-06-03T11:51:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3wf6oyy000l8n3rwyqtihaf","content":"<p>还是比较简单的，这次就权当入个门吧</p>\n<ol>\n<li><p>写好一个C函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;python2.7/Python.h&gt; //默认python版本就是#include&lt;Python.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> PyObject *<span class=\"title\">hellozkw</span><span class=\"params\">(PyObject *self, PyObject *args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> num;</div><div class=\"line\">    <span class=\"comment\">//解析参数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!PyArg_ParseTuple(args, <span class=\"string\">\"i\"</span>, &amp;num)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Py_BuildValue(<span class=\"string\">\"i\"</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;   </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello zkw %d\\n\"</span>, num);                                                                                                                                                   </div><div class=\"line\">    <span class=\"keyword\">return</span> Py_BuildValue(<span class=\"string\">\"i\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> PyMethodDef HMethods[] = &#123; </div><div class=\"line\">    <span class=\"comment\">//方法名，导出函数，参数传递方式，方法描述。</span></div><div class=\"line\">    &#123;<span class=\"string\">\"hellozkw\"</span>, hellozkw, METH_VARARGS, <span class=\"string\">\"hahahaha.... from zkw's hello\"</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inithello</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</div><div class=\"line\">    (<span class=\"keyword\">void</span>) Py_InitModule(<span class=\"string\">\"hello\"</span>, HMethods);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>准备一个setup文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup, Extension</div><div class=\"line\"></div><div class=\"line\">module = Extension(<span class=\"string\">'hello'</span>, sources = [<span class=\"string\">'hello.c'</span>])</div><div class=\"line\">                                                                                                                                                                                     </div><div class=\"line\">setup(name = <span class=\"string\">'hello test'</span>, version = <span class=\"string\">'1.0'</span>, ext_modules = [module])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Makefile文件</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">publish:</span></div><div class=\"line\">    python setup.py build</div><div class=\"line\">    python setup.py install</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行make publush</p>\n</li>\n<li>运行即可<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> hello</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ret = hello.hellozkw(<span class=\"number\">123</span>)</div><div class=\"line\">hello zkw <span class=\"number\">123</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ret</div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>还是比较简单的，这次就权当入个门吧</p>\n<ol>\n<li><p>写好一个C函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;python2.7/Python.h&gt; //默认python版本就是#include&lt;Python.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> PyObject *<span class=\"title\">hellozkw</span><span class=\"params\">(PyObject *self, PyObject *args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> num;</div><div class=\"line\">    <span class=\"comment\">//解析参数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!PyArg_ParseTuple(args, <span class=\"string\">\"i\"</span>, &amp;num)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Py_BuildValue(<span class=\"string\">\"i\"</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;   </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello zkw %d\\n\"</span>, num);                                                                                                                                                   </div><div class=\"line\">    <span class=\"keyword\">return</span> Py_BuildValue(<span class=\"string\">\"i\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> PyMethodDef HMethods[] = &#123; </div><div class=\"line\">    <span class=\"comment\">//方法名，导出函数，参数传递方式，方法描述。</span></div><div class=\"line\">    &#123;<span class=\"string\">\"hellozkw\"</span>, hellozkw, METH_VARARGS, <span class=\"string\">\"hahahaha.... from zkw's hello\"</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inithello</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</div><div class=\"line\">    (<span class=\"keyword\">void</span>) Py_InitModule(<span class=\"string\">\"hello\"</span>, HMethods);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>准备一个setup文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup, Extension</div><div class=\"line\"></div><div class=\"line\">module = Extension(<span class=\"string\">'hello'</span>, sources = [<span class=\"string\">'hello.c'</span>])</div><div class=\"line\">                                                                                                                                                                                     </div><div class=\"line\">setup(name = <span class=\"string\">'hello test'</span>, version = <span class=\"string\">'1.0'</span>, ext_modules = [module])</div></pre></td></tr></table></figure>\n</li>\n<li><p>Makefile文件</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">publish:</span></div><div class=\"line\">    python setup.py build</div><div class=\"line\">    python setup.py install</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行make publush</p>\n</li>\n<li>运行即可<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> hello</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ret = hello.hellozkw(<span class=\"number\">123</span>)</div><div class=\"line\">hello zkw <span class=\"number\">123</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ret</div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Java native关键字","date":"2016-07-03T08:52:18.000Z","_content":"## 前言\n在Java的Object类中的函数定义如hasCode()函数如下:\n```Java\npublic native int hasCode();\n```\n看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下\n\n## 什么是native\nnative就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)\n> \"A native method is a Java method whose implementation is provided by non-java code.\"\n\n定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:\n```Java\npublic class IHaveNatives {\n    native public void Native1(int x);\n    native static public long Native2();\n    native synchronized private float Native3(Object o);\n    native void Native4(int[] ary) throws Exception;\n} \n```\n很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。\n\n## 为什么要有native\n1. 与java环境外交互：\n有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。\n1. 与操作系统交互：\nJVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。\n1. Sun's Java：\nSun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。\n\n## 怎么样使用native\n1. 首先创建一个native的类\n```Java\npublic class HelloNative\n{\n    static\n    {\n        System.loadLibrary(\"HelloNative\");\n    }\n     \n    public static native void sayHello();\n     \n    @SuppressWarnings(\"static-access\")\n    public static void main(String[] args)\n    {\n        new HelloNative().sayHello();\n    }\n}\n```\n2. 运行生成javah，等到头文件\n```Bash\njavac HelloNative.java\njavah HelloNative\n```\n就可以等到如下的HelloNative.h文件\n```C\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class HelloNative */\n \n#ifndef _Included_HelloNative\n#define _Included_HelloNative\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     HelloNative\n * Method:    sayHello\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_HelloNative_sayHello\n  (JNIEnv *, jclass);\n \n#ifdef __cplusplus\n}\n#endif\n#endif\n```\n3. 根据头文件实现一个本地方法\n```C\n#include \"HelloNative.h\"\n#include <stdio.h>\n \nJNIEXPORT void JNICALL Java_HelloNative_sayHello\n{\n    printf(\"Hello，JNI\");   \n}\n```\n4. 用GCC生成库文件\n5. 运行即可\n```Bash\njava HelloNative\n\nHello，JNI\n```\n\n","source":"_posts/Java_native.md","raw":"---\ntitle: Java native关键字\ndate: 2016-07-03 16:52:18\ntags: [java, native]\n---\n## 前言\n在Java的Object类中的函数定义如hasCode()函数如下:\n```Java\npublic native int hasCode();\n```\n看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下\n\n## 什么是native\nnative就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)\n> \"A native method is a Java method whose implementation is provided by non-java code.\"\n\n定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:\n```Java\npublic class IHaveNatives {\n    native public void Native1(int x);\n    native static public long Native2();\n    native synchronized private float Native3(Object o);\n    native void Native4(int[] ary) throws Exception;\n} \n```\n很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。\n\n## 为什么要有native\n1. 与java环境外交互：\n有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。\n1. 与操作系统交互：\nJVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。\n1. Sun's Java：\nSun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。\n\n## 怎么样使用native\n1. 首先创建一个native的类\n```Java\npublic class HelloNative\n{\n    static\n    {\n        System.loadLibrary(\"HelloNative\");\n    }\n     \n    public static native void sayHello();\n     \n    @SuppressWarnings(\"static-access\")\n    public static void main(String[] args)\n    {\n        new HelloNative().sayHello();\n    }\n}\n```\n2. 运行生成javah，等到头文件\n```Bash\njavac HelloNative.java\njavah HelloNative\n```\n就可以等到如下的HelloNative.h文件\n```C\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class HelloNative */\n \n#ifndef _Included_HelloNative\n#define _Included_HelloNative\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     HelloNative\n * Method:    sayHello\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_HelloNative_sayHello\n  (JNIEnv *, jclass);\n \n#ifdef __cplusplus\n}\n#endif\n#endif\n```\n3. 根据头文件实现一个本地方法\n```C\n#include \"HelloNative.h\"\n#include <stdio.h>\n \nJNIEXPORT void JNICALL Java_HelloNative_sayHello\n{\n    printf(\"Hello，JNI\");   \n}\n```\n4. 用GCC生成库文件\n5. 运行即可\n```Bash\njava HelloNative\n\nHello，JNI\n```\n\n","slug":"Java_native","published":1,"updated":"2017-06-03T11:53:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3wf6oz7000n8n3rw7uddisk","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在Java的Object类中的函数定义如hasCode()函数如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hasCode</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure></p>\n<p>看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下</p>\n<h2 id=\"什么是native\"><a href=\"#什么是native\" class=\"headerlink\" title=\"什么是native\"></a>什么是native</h2><p>native就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)</p>\n<blockquote>\n<p>“A native method is a Java method whose implementation is provided by non-java code.”</p>\n</blockquote>\n<p>定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IHaveNatives</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Native1</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">Native2</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> <span class=\"title\">Native3</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">Native4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] ary)</span> <span class=\"keyword\">throws</span> Exception</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。</p>\n<h2 id=\"为什么要有native\"><a href=\"#为什么要有native\" class=\"headerlink\" title=\"为什么要有native\"></a>为什么要有native</h2><ol>\n<li>与java环境外交互：<br>有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。</li>\n<li>与操作系统交互：<br>JVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</li>\n<li>Sun’s Java：<br>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</li>\n</ol>\n<h2 id=\"怎么样使用native\"><a href=\"#怎么样使用native\" class=\"headerlink\" title=\"怎么样使用native\"></a>怎么样使用native</h2><ol>\n<li><p>首先创建一个native的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloNative</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"HelloNative\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> HelloNative().sayHello();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行生成javah，等到头文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac HelloNative.java</div><div class=\"line\">javah HelloNative</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>就可以等到如下的HelloNative.h文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">/* Header for class HelloNative */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _Included_HelloNative</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _Included_HelloNative</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Class:     HelloNative</div><div class=\"line\"> * Method:    sayHello</div><div class=\"line\"> * Signature: ()V</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL <span class=\"title\">Java_HelloNative_sayHello</span></span></div><div class=\"line\">  <span class=\"params\">(JNIEnv *, jclass)</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>根据头文件实现一个本地方法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"HelloNative.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL Java_HelloNative_sayHello</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello，JNI\"</span>);   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>用GCC生成库文件</p>\n</li>\n<li>运行即可<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java HelloNative</div><div class=\"line\"></div><div class=\"line\">Hello，JNI</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在Java的Object类中的函数定义如hasCode()函数如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hasCode</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure></p>\n<p>看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下</p>\n<h2 id=\"什么是native\"><a href=\"#什么是native\" class=\"headerlink\" title=\"什么是native\"></a>什么是native</h2><p>native就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)</p>\n<blockquote>\n<p>“A native method is a Java method whose implementation is provided by non-java code.”</p>\n</blockquote>\n<p>定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IHaveNatives</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Native1</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">Native2</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> <span class=\"title\">Native3</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">Native4</span><span class=\"params\">(<span class=\"keyword\">int</span>[] ary)</span> <span class=\"keyword\">throws</span> Exception</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。</p>\n<h2 id=\"为什么要有native\"><a href=\"#为什么要有native\" class=\"headerlink\" title=\"为什么要有native\"></a>为什么要有native</h2><ol>\n<li>与java环境外交互：<br>有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。</li>\n<li>与操作系统交互：<br>JVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</li>\n<li>Sun’s Java：<br>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</li>\n</ol>\n<h2 id=\"怎么样使用native\"><a href=\"#怎么样使用native\" class=\"headerlink\" title=\"怎么样使用native\"></a>怎么样使用native</h2><ol>\n<li><p>首先创建一个native的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloNative</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"HelloNative\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> HelloNative().sayHello();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行生成javah，等到头文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">javac HelloNative.java</div><div class=\"line\">javah HelloNative</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>就可以等到如下的HelloNative.h文件<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">/* Header for class HelloNative */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _Included_HelloNative</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _Included_HelloNative</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Class:     HelloNative</div><div class=\"line\"> * Method:    sayHello</div><div class=\"line\"> * Signature: ()V</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL <span class=\"title\">Java_HelloNative_sayHello</span></span></div><div class=\"line\">  <span class=\"params\">(JNIEnv *, jclass)</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>根据头文件实现一个本地方法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"HelloNative.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL Java_HelloNative_sayHello</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello，JNI\"</span>);   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>用GCC生成库文件</p>\n</li>\n<li>运行即可<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java HelloNative</div><div class=\"line\"></div><div class=\"line\">Hello，JNI</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj3wf6owu00008n3ritdx6ivk","tag_id":"cj3wf6ox400028n3r5gpkensv","_id":"cj3wf6oxd00078n3rfpud0e6c"},{"post_id":"cj3wf6owu00008n3ritdx6ivk","tag_id":"cj3wf6oxc00058n3r0q4zpg1b","_id":"cj3wf6oxd00088n3r2yndgxqp"},{"post_id":"cj3wf6owz00018n3rxs5idixy","tag_id":"cj3wf6oxc00068n3r0ax0fmxt","_id":"cj3wf6oxe000b8n3r1ogtad9r"},{"post_id":"cj3wf6owz00018n3rxs5idixy","tag_id":"cj3wf6oxd00098n3r19i0op7b","_id":"cj3wf6oxe000c8n3ru31ve38q"},{"post_id":"cj3wf6ox800038n3rz5o9le42","tag_id":"cj3wf6oxe000a8n3r6ozfmqn5","_id":"cj3wf6oxf000e8n3rlu7vcqbr"},{"post_id":"cj3wf6ox900048n3rmkca3469","tag_id":"cj3wf6oxe000d8n3rr2xhdrfd","_id":"cj3wf6oxg000h8n3rvyonvgx4"},{"post_id":"cj3wf6ox900048n3rmkca3469","tag_id":"cj3wf6oxf000f8n3ro8xh988o","_id":"cj3wf6oxg000i8n3ri2glzlac"},{"post_id":"cj3wf6ox900048n3rmkca3469","tag_id":"cj3wf6oxf000g8n3rsf8ccnmj","_id":"cj3wf6oxg000j8n3rsfe382ob"},{"post_id":"cj3wf6oyy000l8n3rwyqtihaf","tag_id":"cj3wf6oxf000g8n3rsf8ccnmj","_id":"cj3wf6oz9000o8n3rxyqt0yxh"},{"post_id":"cj3wf6oz7000n8n3rw7uddisk","tag_id":"cj3wf6ox400028n3r5gpkensv","_id":"cj3wf6ozc000q8n3ragns6rz6"},{"post_id":"cj3wf6oz7000n8n3rw7uddisk","tag_id":"cj3wf6oz9000p8n3rl138gb5g","_id":"cj3wf6ozd000r8n3ramlk7wmb"}],"Tag":[{"name":"java","_id":"cj3wf6ox400028n3r5gpkensv"},{"name":"mybatis","_id":"cj3wf6oxc00058n3r0q4zpg1b"},{"name":"life","_id":"cj3wf6oxc00068n3r0ax0fmxt"},{"name":"hangzhou","_id":"cj3wf6oxd00098n3r19i0op7b"},{"name":"protobuf","_id":"cj3wf6oxe000a8n3r6ozfmqn5"},{"name":"blog","_id":"cj3wf6oxe000d8n3rr2xhdrfd"},{"name":"pelican","_id":"cj3wf6oxf000f8n3ro8xh988o"},{"name":"python","_id":"cj3wf6oxf000g8n3rsf8ccnmj"},{"name":"native","_id":"cj3wf6oz9000p8n3rl138gb5g"}]}}